<?xml version="1.0" encoding="UTF-8"?>
<pivot:Root xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:pivot="http://www.eclipse.org/ocl/3.1.0/Pivot" xsi:schemaLocation="http://www.eclipse.org/ocl/3.1.0/Pivot ../../Pivot.ecore" name="OCL-2.5.oclstdlib" externalURI="platform:/resource/org.eclipse.ocl.examples.library/model/OCL-2.5.oclstdlib">
  <ownedComment body="This clause describes the OCL Standard Library of predefined types, their operations, and predefined expression templates in the OCL.&#xA;This sub clause contains all standard types defined within OCL, including all the operations defined on those types.&#xA;For each operation the signature and a description of the semantics is given.&#xA;Within the description, the reserved word ‘result’ is used to refer to the value that results from evaluating the operation.&#xA;In several places, post conditions are used to describe properties of the result.&#xA;When there is more than one postcondition, all postconditions must be true.&#xA;A similar thing is true for multiple preconditions.&#xA;If these are used, the operation is only defined if all preconditions evaluate to oclText[true].&#xA;&#xA;heading:1[Introduction]&#xA;&#xA;The structure, syntax, and semantics of the OCL is defined in Clauses 8 (Abstract Syntax), 9 (Concrete Syntax),&#xA;and 10 (Semantics Described using UML).&#xA;This sub clause adds another part to the OCL definition: a library of predefined types and operations.&#xA;Any implementation of OCL must include this library package. This approach has also been taken by e.g., the Java definition,&#xA;where the language definition and the standard libraries are both mandatory parts of the complete language definition.&#xA;&#xA;The OCL standard library defines a number of types.&#xA;It includes several primitive types: UnlimitedNatural, Integer, Real, String, and Boolean.&#xA;These are familiar from many other languages. The second part of the standard library consists of the collection types.&#xA;They are Bag, Set, Sequence, and Collection where Collection is an abstract type.&#xA;Note that all types defined in the OCL standard library are instances of an abstract syntax class.&#xA;The OCL standard library exists at the modeling level, also referred to as the M1 level, where the abstract syntax is the metalevel or M2 level.&#xA;&#xA;Next to definitions of types the OCL standard library defines a number of template expressions.&#xA;Many operations defined on collections map not on the abstract syntax metaclass FeatureCallExp, but on the IteratorExp.&#xA;For each of these a template expression that defines the name and format of the expression is defined in 11.8, Predefined Iterator Expressions.&#xA;&#xA;The Standard Library may be extended with new types, new operations and new iterators.&#xA;In particular new operations can be defined for collections.&#xA;&#xA;Certain String operations depend on the prevailing locale to ensure that Strings are collated and characters are case-converted&#xA;in an appropriate fashion.&#xA;A locale is defined as a concatenation of up to three character sequences separated by underscores,&#xA;with the first sequence identifying the language and the second sequence identifying the country.&#xA;The third sequence is empty but may encode an implementation-specific variant.&#xA;Trailing empty strings and separators may be omitted.&#xA;&#xA;The character sequences for languages are defined by ISO 639.&#xA;&#xA;The character sequences for countries are defined by ISO 3166.&#xA;&#xA;‘fr_CA’ therefore identifies the locale for the French language in the Canada country.&#xA;&#xA;Comparison of strings and consequently the collation order of Collection::sortedBy()&#xA;conforms to the Unicode Collation algorithm defined by Unicode Technical Standard#10.&#xA;&#xA;The locale is ‘en_us’ by default but may be configured by a property constraint on OclAny::oclLocale.&#xA;&#xA;The prevailing locale is defined by the prevailing value of oclLocale within the current environment;&#xA;it may therefore be changed temporarily by using a Let expression.&#xA;let oclLocale : String = ‘fr_CA’ in aString.toUpperCase()&#xA;&#xA;heading:1[Iterators]&#xA;&#xA;This sub clause defines the standard OCL iterator expressions.&#xA;In the abstract syntax these are all instances of IteratorExp.&#xA;These iterator expressions always have a collection expression as their source,&#xA;as is defined in the well-formedness rules in Clause 8 (Abstract Syntax).&#xA;The defined iterator expressions are shown per source collection type.&#xA;The semantics of each iterator expression is defined through a mapping from the iterator to the ‘iterate’ construct.&#xA;This means that the semantics of the iterator expressions do not need to be defined separately in the semantics sub clauses.&#xA;&#xA;In all of the following OCL expressions, the lefthand side of the equals sign is the IteratorExp to be defined,&#xA;and the righthand side of the equals sign is the equivalent as an IterateExp.&#xA;The names source, body, and iterator refer to the role names in the abstract syntax:&#xA;&#xA;source&#x9;The source expression of the IteratorExp.&#xA;&#xA;body&#x9;The body expression of the IteratorExp.&#xA;&#xA;iterator&#x9;The iterator variable of the IteratorExp.&#xA;&#xA;result&#x9;The result variable of the IterateExp.&#xA;&#xA;heading:2[Extending the Standard Library with Iterator Expressions]&#xA;&#xA;It is possible to add new iterator expressions in the standard library.&#xA;If this is done the semantics of a new iterator should be defined by mapping it to existing constructs,&#xA;in the same way the semantics of pre-defined iterators is done (see sub clause 11.9)&#xA;&#xA;"/>
  <nestedPackage xsi:type="pivot:Library" xmi:id="P.ocl" name="ocl" nsPrefix="ocl" nsURI="http://www.eclipse.org/ocl/3.1.0/OCL.oclstdlib">
    <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
      <ownedDetail name="PackageRole">
        <value>StandardLibrary</value>
      </ownedDetail>
      <ownedDetail name="ClassGroup_Collection">
        <value>This sub clause defines the collection types and their operations. As defined in this sub clause, each collection type is actually a template type with one parameter. ‘T’ denotes the parameter. A concrete collection type is created by substituting a type for the T. So Set (Integer) and Bag (Person) are collection types.</value>
      </ownedDetail>
      <ownedDetail name="ClassGroup_PrimitiveTypes">
        <value>The primitive types defined in the OCL standard library are UnlimitedNatural, Integer, Real, String, and Boolean. They are all instances of the metaclass Primitive from the UML core package.</value>
      </ownedDetail>
    </ownedAnnotation>
    <ownedComment body="This clause describes the OCL Standard Library of predefined types, their operations, and predefined expression templates in the OCL.&#xA;This sub clause contains all standard types defined within OCL, including all the operations defined on those types.&#xA;For each operation the signature and a description of the semantics is given.&#xA;Within the description, the reserved word ‘result’ is used to refer to the value that results from evaluating the operation.&#xA;In several places, post conditions are used to describe properties of the result.&#xA;When there is more than one postcondition, all postconditions must be true.&#xA;A similar thing is true for multiple preconditions.&#xA;If these are used, the operation is only defined if all preconditions evaluate to oclText[true].&#xA;&#xA;heading:1[Introduction]&#xA;&#xA;The structure, syntax, and semantics of the OCL is defined in Clauses 8 (     Abstract Syntax), 9 (Concrete Syntax) and 10 (Semantics Described using UML).&#xA;This sub clause adds another part to the OCL definition: a library of predefined types and operations.&#xA;Any implementation of OCL must include this library package. This approach has also been taken by e.g., the Java definition,&#xA;where the language definition and the standard libraries are both mandatory parts of the complete language definition.&#xA;&#xA;The OCL standard library defines a number of types.&#xA;It includes several primitive types: UnlimitedNatural, Integer, Real, String, and Boolean.&#xA;These are familiar from many other languages. The second part of the standard library consists of the collection types.&#xA;They are Bag, Set, Sequence, and Collection where Collection is an abstract type.&#xA;Note that all types defined in the OCL standard library are instances of an abstract syntax class.&#xA;The OCL standard library exists at the modeling level, also referred to as the M1 level, where the abstract syntax is the metalevel or M2 level.&#xA;&#xA;Next to definitions of types the OCL standard library defines a number of template expressions.&#xA;Many operations defined on collections map not on the abstract syntax metaclass FeatureCallExp, but on the IteratorExp.&#xA;For each of these a template expression that defines the name and format of the expression is defined in 11.8, Predefined Iterator Expressions.&#xA;&#xA;The Standard Library may be extended with new types, new operations and new iterators.&#xA;In particular new operations can be defined for collections.&#xA;&#xA;Certain String operations depend on the prevailing locale to ensure that Strings are collated and characters are case-converted&#xA;in an appropriate fashion.&#xA;A locale is defined as a concatenation of up to three character sequences separated by underscores,&#xA;with the first sequence identifying the language and the second sequence identifying the country.&#xA;The third sequence is empty but may encode an implementation-specific variant.&#xA;Trailing empty strings and separators may be omitted.&#xA;&#xA;The character sequences for languages are defined by ISO 639.&#xA;&#xA;The character sequences for countries are defined by ISO 3166.&#xA;&#xA;‘fr_CA’ therefore identifies the locale for the French language in the Canada country.&#xA;&#xA;Comparison of strings and consequently the collation order of Collection::sortedBy()&#xA;conforms to the Unicode Collation algorithm defined by Unicode Technical Standard#10.&#xA;&#xA;The locale is ‘en_us’ by default but may be configured by a property constraint on OclAny::oclLocale.&#xA;&#xA;The prevailing locale is defined by the prevailing value of oclLocale within the current environment;&#xA;it may therefore be changed temporarily by using a Let expression.&#xA;let oclLocale : String = ‘fr_CA’ in aString.toUpperCase()&#xA;&#xA;heading:1[Iterators]&#xA;&#xA;This sub clause defines the standard OCL iterator expressions.&#xA;In the abstract syntax these are all instances of IteratorExp.&#xA;These iterator expressions always have a collection expression as their source,&#xA;as is defined in the well-formedness rules in Clause 8 (Abstract Syntax).&#xA;The defined iterator expressions are shown per source collection type.&#xA;The semantics of each iterator expression is defined through a mapping from the iterator to the ‘iterate’ construct.&#xA;This means that the semantics of the iterator expressions do not need to be defined separately in the semantics sub clauses.&#xA;&#xA;In all of the following OCL expressions, the lefthand side of the equals sign is the IteratorExp to be defined,&#xA;and the righthand side of the equals sign is the equivalent as an IterateExp.&#xA;The names source, body, and iterator refer to the role names in the abstract syntax:&#xA;&#xA;source&#x9;The source expression of the IteratorExp.&#xA;&#xA;body&#x9;The body expression of the IteratorExp.&#xA;&#xA;iterator&#x9;The iterator variable of the IteratorExp.&#xA;&#xA;result&#x9;The result variable of the IterateExp.&#xA;&#xA;heading:2[Extending the Standard Library with Iterator Expressions]&#xA;&#xA;It is possible to add new iterator expressions in the standard library.&#xA;If this is done the semantics of a new iterator should be defined by mapping it to existing constructs,&#xA;in the same way the semantics of pre-defined iterators is done (see sub clause 11.9)&#xA;&#xA;"/>
    <ownedType xsi:type="pivot:PrimitiveType" xmi:id="Boolean" name="Boolean" superClass="T.ocl.OclAny">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>Primitive</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="The standard type Boolean represents the common true/false values.&#xA;Boolean is itself an instance of the metatype PrimitiveType (from UML).&#xA;"/>
      <ownedOperation xmi:id="o.ocl.Boolean.%61%..ocl.OclSelf" name="=" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyEqualOperation" precedence="Z.EQUALITY">
        <ownedComment body="Returns oclText[true] if the logical value of oclText[self] is the same as the numeric value of object2, oclText[false] otherwise."/>
        <ownedParameter xmi:id="p0o.ocl.Boolean.%61%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Boolean.%60%%62%..ocl.OclSelf" name="&lt;>" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyNotEqualOperation" precedence="Z.EQUALITY">
        <ownedComment body="Returns oclText[true] if the logical value of oclText[self] is the not same as the numeric value of object2, oclText[false] otherwise."/>
        <ownedParameter xmi:id="p0o.ocl.Boolean.%60%%62%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Boolean.allInstances" isStatic="true" name="allInstances" type="//@nestedPackage.1/@ownedType.145" implementationClass="org.eclipse.ocl.examples.library.logical.BooleanAllInstancesOperation">
        <ownedComment body="Returns oclText[Set{false, true}]."/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Boolean.and..ocl.Boolean" name="and" isRequired="false" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.logical.BooleanAndOperation" isInvalidating="true" isValidating="true" precedence="Z.AND">
        <ownedComment body="oclText[false] if either oclText[self] or oclText[b] is oclText[false].&#xA;Otherwise oclText[invalid] if either oclText[self] or oclText[b] is oclText[invalid] .&#xA;Otherwise oclText[null] if either oclText[self] or oclText[b] is oclText[null].&#xA;Otherwise oclText[true].&#xA;"/>
        <bodyExpression xsi:type="pivot:ExpressionInOCL" isRequired="false" type="Boolean">
          <body>if self.oclIsInvalid() then
		        if b.oclIsInvalid() then self
		        else if b = false then false
		        else self
		        endif endif
		      else if self = false then false
		      else if b.oclIsInvalid() then b
		      else if b = false then false
		      else if self = null then null
		      else if b = null then null
		      else true
		      endif endif endif endif endif endif</body>
          <language>OCL</language>
          <bodyExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
            <condition xsi:type="pivot:OperationCallExp" type="Boolean" referredOperation="o.ocl.OclAny.oclIsInvalid">
              <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.3/@bodyExpression/@contextVariable"/>
            </condition>
            <elseExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
              <condition xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
                <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.3/@bodyExpression/@contextVariable"/>
                <argument xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="false"/>
              </condition>
              <elseExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
                <condition xsi:type="pivot:OperationCallExp" type="Boolean" referredOperation="o.ocl.OclAny.oclIsInvalid">
                  <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.3/@bodyExpression/@parameterVariable.0"/>
                </condition>
                <elseExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
                  <condition xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
                    <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.3/@bodyExpression/@parameterVariable.0"/>
                    <argument xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="false"/>
                  </condition>
                  <elseExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
                    <condition xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
                      <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.3/@bodyExpression/@contextVariable"/>
                      <argument xsi:type="pivot:NullLiteralExp" isRequired="false" type="T.ocl.OclVoid"/>
                    </condition>
                    <elseExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
                      <condition xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
                        <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.3/@bodyExpression/@parameterVariable.0"/>
                        <argument xsi:type="pivot:NullLiteralExp" isRequired="false" type="T.ocl.OclVoid"/>
                      </condition>
                      <elseExpression xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="true"/>
                      <thenExpression xsi:type="pivot:NullLiteralExp" isRequired="false" type="T.ocl.OclVoid"/>
                    </elseExpression>
                    <thenExpression xsi:type="pivot:NullLiteralExp" isRequired="false" type="T.ocl.OclVoid"/>
                  </elseExpression>
                  <thenExpression xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="false"/>
                </elseExpression>
                <thenExpression xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.3/@bodyExpression/@parameterVariable.0"/>
              </elseExpression>
              <thenExpression xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="false"/>
            </elseExpression>
            <thenExpression xsi:type="pivot:IfExp" type="Boolean">
              <condition xsi:type="pivot:OperationCallExp" type="Boolean" referredOperation="o.ocl.OclAny.oclIsInvalid">
                <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.3/@bodyExpression/@parameterVariable.0"/>
              </condition>
              <elseExpression xsi:type="pivot:IfExp" type="Boolean">
                <condition xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
                  <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.3/@bodyExpression/@parameterVariable.0"/>
                  <argument xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="false"/>
                </condition>
                <elseExpression xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.3/@bodyExpression/@contextVariable"/>
                <thenExpression xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="false"/>
              </elseExpression>
              <thenExpression xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.3/@bodyExpression/@contextVariable"/>
            </thenExpression>
          </bodyExpression>
          <contextVariable name="self" type="Boolean"/>
          <parameterVariable name="b" type="Boolean" representedParameter="p0o.ocl.Boolean.and..ocl.Boolean"/>
        </bodyExpression>
        <ownedParameter xmi:id="p0o.ocl.Boolean.and..ocl.Boolean" name="b" isRequired="false" type="Boolean"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Boolean.implies..ocl.Boolean" name="implies" isRequired="false" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.logical.BooleanImpliesOperation" isInvalidating="true" isValidating="true" precedence="Z.IMPLIES">
        <ownedComment body="oclText[true] if oclText[self] is oclText[false], or if oclText[b] is oclText[true].&#xA;Otherwise oclText[invalid] if either oclText[self] or oclText[b] is oclText[invalid].&#xA;Otherwise oclText[null] if either oclText[self] or oclText[b] is oclText[null].&#xA;Otherwise oclText[false].&#xA;"/>
        <bodyExpression xsi:type="pivot:ExpressionInOCL" isRequired="false" type="Boolean">
          <body>if self.oclIsInvalid() then
		        if b.oclIsInvalid() then self
		        else if b = true then true
		        else self
		        endif endif
		      else if self = false then true
		      else if b.oclIsInvalid() then b
		      else if b = true then true
		      else if self = null then null
		      else if b = null then b
		      else false
		      endif endif endif endif endif endif</body>
          <language>OCL</language>
          <bodyExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
            <condition xsi:type="pivot:OperationCallExp" type="Boolean" referredOperation="o.ocl.OclAny.oclIsInvalid">
              <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.4/@bodyExpression/@contextVariable"/>
            </condition>
            <elseExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
              <condition xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
                <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.4/@bodyExpression/@contextVariable"/>
                <argument xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="false"/>
              </condition>
              <elseExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
                <condition xsi:type="pivot:OperationCallExp" type="Boolean" referredOperation="o.ocl.OclAny.oclIsInvalid">
                  <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.4/@bodyExpression/@parameterVariable.0"/>
                </condition>
                <elseExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
                  <condition xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
                    <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.4/@bodyExpression/@parameterVariable.0"/>
                    <argument xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="true"/>
                  </condition>
                  <elseExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
                    <condition xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
                      <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.4/@bodyExpression/@contextVariable"/>
                      <argument xsi:type="pivot:NullLiteralExp" isRequired="false" type="T.ocl.OclVoid"/>
                    </condition>
                    <elseExpression xsi:type="pivot:IfExp" type="Boolean">
                      <condition xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
                        <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.4/@bodyExpression/@parameterVariable.0"/>
                        <argument xsi:type="pivot:NullLiteralExp" isRequired="false" type="T.ocl.OclVoid"/>
                      </condition>
                      <elseExpression xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="false"/>
                      <thenExpression xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.4/@bodyExpression/@parameterVariable.0"/>
                    </elseExpression>
                    <thenExpression xsi:type="pivot:NullLiteralExp" isRequired="false" type="T.ocl.OclVoid"/>
                  </elseExpression>
                  <thenExpression xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="true"/>
                </elseExpression>
                <thenExpression xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.4/@bodyExpression/@parameterVariable.0"/>
              </elseExpression>
              <thenExpression xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="true"/>
            </elseExpression>
            <thenExpression xsi:type="pivot:IfExp" type="Boolean">
              <condition xsi:type="pivot:OperationCallExp" type="Boolean" referredOperation="o.ocl.OclAny.oclIsInvalid">
                <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.4/@bodyExpression/@parameterVariable.0"/>
              </condition>
              <elseExpression xsi:type="pivot:IfExp" type="Boolean">
                <condition xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
                  <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.4/@bodyExpression/@parameterVariable.0"/>
                  <argument xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="true"/>
                </condition>
                <elseExpression xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.4/@bodyExpression/@contextVariable"/>
                <thenExpression xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="true"/>
              </elseExpression>
              <thenExpression xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.4/@bodyExpression/@contextVariable"/>
            </thenExpression>
          </bodyExpression>
          <contextVariable name="self" type="Boolean"/>
          <parameterVariable name="b" type="Boolean" representedParameter="p0o.ocl.Boolean.implies..ocl.Boolean"/>
        </bodyExpression>
        <ownedParameter xmi:id="p0o.ocl.Boolean.implies..ocl.Boolean" name="b" isRequired="false" type="Boolean"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Boolean.not" name="not" isRequired="false" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.logical.BooleanNotOperation" precedence="Z.UNARY">
        <ownedComment body="oclText[true] if oclText[self] is oclText[false].&#xA;oclText[false] if oclText[self] is oclText[true].&#xA;oclText[null] if oclText[self] is oclText[null].&#xA;Otherwise oclText[invalid].&#xA;"/>
        <bodyExpression xsi:type="pivot:ExpressionInOCL" isRequired="false" type="Boolean">
          <body>if self.oclIsInvalid() then self
		      else if self = null then null
		      else self = false
		      endif endif</body>
          <language>OCL</language>
          <bodyExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
            <condition xsi:type="pivot:OperationCallExp" type="Boolean" referredOperation="o.ocl.OclAny.oclIsInvalid">
              <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.5/@bodyExpression/@contextVariable"/>
            </condition>
            <elseExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
              <condition xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
                <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.5/@bodyExpression/@contextVariable"/>
                <argument xsi:type="pivot:NullLiteralExp" isRequired="false" type="T.ocl.OclVoid"/>
              </condition>
              <elseExpression xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
                <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.5/@bodyExpression/@contextVariable"/>
                <argument xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="false"/>
              </elseExpression>
              <thenExpression xsi:type="pivot:NullLiteralExp" isRequired="false" type="T.ocl.OclVoid"/>
            </elseExpression>
            <thenExpression xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.5/@bodyExpression/@contextVariable"/>
          </bodyExpression>
          <contextVariable name="self" type="Boolean"/>
        </bodyExpression>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Boolean.or..ocl.Boolean" name="or" isRequired="false" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.logical.BooleanOrOperation" isInvalidating="true" isValidating="true" precedence="Z.OR">
        <ownedComment body="oclText[true] if either oclText[self] or oclText[b] is oclText[true].&#xA;Otherwise oclText[invalid] if either oclText[self] or oclText[b] is oclText[invalid].&#xA;Otherwise oclText[null] if either oclText[self] or oclText[b] is oclText[null].&#xA;Otherwise oclText[false].&#xA;"/>
        <bodyExpression xsi:type="pivot:ExpressionInOCL" isRequired="false" type="Boolean">
          <body>if self.oclIsInvalid() then
		        if b.oclIsInvalid() then self
			    else if b = true then true
		        else self
		        endif endif
		      else if self = true then true
			  else if b.oclIsInvalid() then b
			  else if b = true then true
			  else if self = null then null
			  else if b = null then null
		      else false
		      endif endif endif endif endif endif</body>
          <language>OCL</language>
          <bodyExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
            <condition xsi:type="pivot:OperationCallExp" type="Boolean" referredOperation="o.ocl.OclAny.oclIsInvalid">
              <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.6/@bodyExpression/@contextVariable"/>
            </condition>
            <elseExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
              <condition xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
                <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.6/@bodyExpression/@contextVariable"/>
                <argument xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="true"/>
              </condition>
              <elseExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
                <condition xsi:type="pivot:OperationCallExp" type="Boolean" referredOperation="o.ocl.OclAny.oclIsInvalid">
                  <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.6/@bodyExpression/@parameterVariable.0"/>
                </condition>
                <elseExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
                  <condition xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
                    <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.6/@bodyExpression/@parameterVariable.0"/>
                    <argument xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="true"/>
                  </condition>
                  <elseExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
                    <condition xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
                      <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.6/@bodyExpression/@contextVariable"/>
                      <argument xsi:type="pivot:NullLiteralExp" isRequired="false" type="T.ocl.OclVoid"/>
                    </condition>
                    <elseExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
                      <condition xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
                        <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.6/@bodyExpression/@parameterVariable.0"/>
                        <argument xsi:type="pivot:NullLiteralExp" isRequired="false" type="T.ocl.OclVoid"/>
                      </condition>
                      <elseExpression xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="false"/>
                      <thenExpression xsi:type="pivot:NullLiteralExp" isRequired="false" type="T.ocl.OclVoid"/>
                    </elseExpression>
                    <thenExpression xsi:type="pivot:NullLiteralExp" isRequired="false" type="T.ocl.OclVoid"/>
                  </elseExpression>
                  <thenExpression xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="true"/>
                </elseExpression>
                <thenExpression xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.6/@bodyExpression/@parameterVariable.0"/>
              </elseExpression>
              <thenExpression xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="true"/>
            </elseExpression>
            <thenExpression xsi:type="pivot:IfExp" type="Boolean">
              <condition xsi:type="pivot:OperationCallExp" type="Boolean" referredOperation="o.ocl.OclAny.oclIsInvalid">
                <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.6/@bodyExpression/@parameterVariable.0"/>
              </condition>
              <elseExpression xsi:type="pivot:IfExp" type="Boolean">
                <condition xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
                  <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.6/@bodyExpression/@parameterVariable.0"/>
                  <argument xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="true"/>
                </condition>
                <elseExpression xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.6/@bodyExpression/@contextVariable"/>
                <thenExpression xsi:type="pivot:BooleanLiteralExp" type="Boolean" booleanSymbol="true"/>
              </elseExpression>
              <thenExpression xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.6/@bodyExpression/@contextVariable"/>
            </thenExpression>
          </bodyExpression>
          <contextVariable name="self" type="Boolean"/>
          <parameterVariable name="b" type="Boolean" representedParameter="p0o.ocl.Boolean.or..ocl.Boolean"/>
        </bodyExpression>
        <ownedParameter xmi:id="p0o.ocl.Boolean.or..ocl.Boolean" name="b" isRequired="false" type="Boolean"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Boolean.toString" name="toString" type="String" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyToStringOperation">
        <ownedComment body="Converts oclText[self] to a string value.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Boolean.xor..ocl.Boolean" name="xor" isRequired="false" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.logical.BooleanXorOperation" precedence="Z.XOR">
        <ownedComment body="oclText[true] if oclText[self] is oclText[true] and oclText[b] is oclText[false], or if oclText[self] is oclText[false] and oclText[b] is oclText[true].&#xA;oclText[false] if oclText[self] is oclText[true] and oclText[b] is oclText[true], or if oclText[self] is oclText[false] and oclText[b] is oclText[false].&#xA;Otherwise oclText[invalid] if either oclText[self] or oclText[b] is oclText[invalid].&#xA;Otherwise oclText[null].&#xA;"/>
        <bodyExpression xsi:type="pivot:ExpressionInOCL" isRequired="false" type="Boolean">
          <body>if self = null then null
		      else if b = null then null
		      else self &lt;> b
		      endif endif</body>
          <language>OCL</language>
          <bodyExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
            <condition xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
              <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.8/@bodyExpression/@contextVariable"/>
              <argument xsi:type="pivot:NullLiteralExp" isRequired="false" type="T.ocl.OclVoid"/>
            </condition>
            <elseExpression xsi:type="pivot:IfExp" isRequired="false" type="Boolean">
              <condition xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
                <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.8/@bodyExpression/@parameterVariable.0"/>
                <argument xsi:type="pivot:NullLiteralExp" isRequired="false" type="T.ocl.OclVoid"/>
              </condition>
              <elseExpression xsi:type="pivot:OperationCallExp" name="&lt;>" type="Boolean" referredOperation="o.ocl.Boolean.%60%%62%..ocl.OclSelf">
                <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.8/@bodyExpression/@contextVariable"/>
                <argument xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.0/@ownedOperation.8/@bodyExpression/@parameterVariable.0"/>
              </elseExpression>
              <thenExpression xsi:type="pivot:NullLiteralExp" isRequired="false" type="T.ocl.OclVoid"/>
            </elseExpression>
            <thenExpression xsi:type="pivot:NullLiteralExp" isRequired="false" type="T.ocl.OclVoid"/>
          </bodyExpression>
          <contextVariable name="self" type="Boolean"/>
          <parameterVariable name="b" type="Boolean" representedParameter="p0o.ocl.Boolean.xor..ocl.Boolean"/>
        </bodyExpression>
        <ownedParameter xmi:id="p0o.ocl.Boolean.xor..ocl.Boolean" name="b" isRequired="false" type="Boolean"/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:PrimitiveType" xmi:id="Integer" name="Integer" superClass="Real">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>Primitive</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="The standard type Integer represents the mathematical concept of integer.&#xA;Note that UnlimitedNatural is a subclass of Integer, so for each parameter of type Integer,&#xA;you can use an unlimited natural as the actual parameter.&#xA;Integer is itself an instance of the metatype PrimitiveType (from UML).&#xA;"/>
      <ownedOperation xmi:id="o.ocl.Integer.%45%" name="-" type="Integer" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericNegateOperation" precedence="Z.UNARY">
        <ownedComment body="The negative value of oclText[self].&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Integer.%43%..ocl.OclSelf" name="+" type="Integer" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericPlusOperation" precedence="Z.ADDITIVE">
        <ownedComment body="The value of the addition of oclText[self] and i.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Integer.%43%..ocl.OclSelf" name="i" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Integer.%45%..ocl.OclSelf" name="-" type="Integer" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericMinusOperation" precedence="Z.ADDITIVE">
        <ownedComment body="The value of the subtraction of i from oclText[self].&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Integer.%45%..ocl.OclSelf" name="i" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Integer.%42%..ocl.OclSelf" name="*" type="Integer" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericTimesOperation" precedence="Z.MULTIPLICATIVE">
        <ownedComment body="The value of the multiplication of oclText[self] and i.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Integer.%42%..ocl.OclSelf" name="i" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Integer.%47%..ocl.OclSelf" name="/" type="Real" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericDivideOperation" precedence="Z.MULTIPLICATIVE">
        <ownedComment body="The value of oclText[self] divided by i.&#xA;Evaluates to oclText[invalid] if r is equal to zero.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Integer.%47%..ocl.OclSelf" name="i" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Integer.abs" name="abs" type="Integer" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericAbsOperation">
        <ownedComment body="The absolute value of oclText[self].&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Integer.compareTo..ocl.OclSelf" name="compareTo" type="Integer" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericCompareToOperation">
        <ownedComment body="The comparison of oclText[self] with oclText[that]. -ve if less than, 0 if equal, +ve if greater than.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Integer.compareTo..ocl.OclSelf" name="that" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Integer.div..ocl.Integer" name="div" type="Integer" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericDivOperation">
        <ownedComment body="The number of times that i fits completely within oclText[self].&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Integer.div..ocl.Integer" name="i" type="Integer"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Integer.mod..ocl.Integer" name="mod" type="Integer" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericModOperation">
        <ownedComment body="The result is oclText[self] modulo i.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Integer.mod..ocl.Integer" name="i" type="Integer"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Integer.max..ocl.OclSelf" name="max" type="Integer" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericMaxOperation">
        <ownedComment body="The maximum of oclText[self] an i.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Integer.max..ocl.OclSelf" name="i" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Integer.min..ocl.OclSelf" name="min" type="Integer" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericMinOperation">
        <ownedComment body="The minimum of oclText[self] an i.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Integer.min..ocl.OclSelf" name="i" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Integer.toString" name="toString" type="String" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyToStringOperation">
        <ownedComment body="Converts oclText[self] to a string value.&#xA;"/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:PrimitiveType" xmi:id="Real" name="Real" superClass="T.ocl.OclComparable T.ocl.OclSummable">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>Primitive</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="The standard type Real represents the mathematical concept of real.&#xA;Note that UnlimitedNatural is a subclass of Integer and that Integer is a subclass of Real,&#xA;so for each parameter of type Real, you can use an unlimited natural or an integer as the actual parameter.&#xA;Real is itself an instance of the metatype PrimitiveType (from UML).&#xA;"/>
      <ownedOperation xmi:id="o.ocl.Real.%61%..ocl.OclSelf" name="=" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyEqualOperation" precedence="Z.EQUALITY">
        <ownedComment body="Returns oclText[true] if the numeric value of oclText[self] is the same as the numeric value of object2, oclText[false] otherwise."/>
        <ownedParameter xmi:id="p0o.ocl.Real.%61%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Real.%60%%62%..ocl.OclSelf" name="&lt;>" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyNotEqualOperation" precedence="Z.EQUALITY">
        <ownedComment body="Returns oclText[true] if the numeric value of oclText[self] is the not the same as the numeric value of object2, oclText[false] otherwise."/>
        <ownedParameter xmi:id="p0o.ocl.Real.%60%%62%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Real.%43%..ocl.OclSelf" name="+" type="Real" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericPlusOperation" precedence="Z.ADDITIVE">
        <ownedComment body="The value of the addition of oclText[self] and r.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Real.%43%..ocl.OclSelf" name="r" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Real.%45%..ocl.OclSelf" name="-" type="Real" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericMinusOperation" precedence="Z.ADDITIVE">
        <ownedComment body="The value of the subtraction of r from oclText[self].&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Real.%45%..ocl.OclSelf" name="r" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Real.%42%..ocl.OclSelf" name="*" type="Real" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericTimesOperation" precedence="Z.MULTIPLICATIVE">
        <ownedComment body="The value of the multiplication of oclText[self] and r.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Real.%42%..ocl.OclSelf" name="r" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Real.%45%" name="-" type="Real" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericNegateOperation" precedence="Z.UNARY">
        <ownedComment body="The negative value of oclText[self].&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Real.%47%..ocl.OclSelf" name="/" type="Real" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericDivideOperation" precedence="Z.MULTIPLICATIVE">
        <ownedComment body="The value of oclText[self] divided by r. Evaluates to oclText[invalid] if r is equal to zero.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Real.%47%..ocl.OclSelf" name="r" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Real.%62%..ocl.OclSelf" name=">" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericGreaterThanOperation" precedence="Z.RELATIONAL">
        <ownedComment body="True if oclText[self] is greater than r.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Real.%62%..ocl.OclSelf" name="r" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Real.%60%..ocl.OclSelf" name="&lt;" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericLessThanOperation" precedence="Z.RELATIONAL">
        <ownedComment body="True if oclText[self] is less than r.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Real.%60%..ocl.OclSelf" name="r" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Real.%60%%61%..ocl.OclSelf" name="&lt;=" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericLessThanEqualOperation" precedence="Z.RELATIONAL">
        <ownedComment body="True if oclText[self] is less than or equal to r.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Real.%60%%61%..ocl.OclSelf" name="r" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Real.%62%%61%..ocl.OclSelf" name=">=" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericGreaterThanEqualOperation" precedence="Z.RELATIONAL">
        <ownedComment body="True if oclText[self] is greater than or equal to r.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Real.%62%%61%..ocl.OclSelf" name="r" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Real.abs" name="abs" type="Real" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericAbsOperation">
        <ownedComment body="The absolute value of oclText[self].&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Real.compareTo..ocl.OclSelf" name="compareTo" type="Integer" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericCompareToOperation">
        <ownedComment body="The comparison of oclText[self] with oclText[that]. -ve if less than, 0 if equal, +ve if greater than.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Real.compareTo..ocl.OclSelf" name="that" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Real.floor" name="floor" type="Integer" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericFloorOperation">
        <ownedComment body="The largest integer that is less than or equal to oclText[self].&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Real.max..ocl.OclSelf" name="max" type="Real" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericMaxOperation">
        <ownedComment body="The maximum of oclText[self] and r.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Real.max..ocl.OclSelf" name="r" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Real.min..ocl.OclSelf" name="min" type="Real" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericMinOperation">
        <ownedComment body="The minimum of oclText[self] and r.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Real.min..ocl.OclSelf" name="r" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Real.round" name="round" type="Integer" implementationClass="org.eclipse.ocl.examples.library.numeric.NumericRoundOperation">
        <ownedComment body="The integer that is closest to oclText[self]. When there are two such integers, the largest one.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Real.toString" name="toString" type="String" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyToStringOperation">
        <ownedComment body="Converts oclText[self] to a string value.&#xA;"/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:PrimitiveType" xmi:id="String" name="String" superClass="T.ocl.OclComparable T.ocl.OclSummable">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>Primitive</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="The standard type String represents strings, which can be both ASCII or Unicode.&#xA;String is itself an instance of the metatype PrimitiveType (from UML).&#xA;"/>
      <ownedOperation xmi:id="o.ocl.String.%61%..ocl.OclSelf" name="=" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyEqualOperation" precedence="Z.EQUALITY">
        <ownedParameter xmi:id="p0o.ocl.String.%61%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.%60%%62%..ocl.OclSelf" name="&lt;>" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyNotEqualOperation" precedence="Z.EQUALITY">
        <ownedParameter xmi:id="p0o.ocl.String.%60%%62%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.%43%..ocl.String" name="+" type="String" implementationClass="org.eclipse.ocl.examples.library.string.StringConcatOperation" precedence="Z.ADDITIVE">
        <ownedComment body="The concatenation of oclText[self] and s.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.%43%..ocl.String" name="s" type="String"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.at..ocl.Integer" name="at" type="String" implementationClass="org.eclipse.ocl.examples.library.string.StringAtOperation" isInvalidating="true">
        <ownedComment body="Queries the character at position i in oclText[self].&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.at..ocl.Integer" name="i" type="Integer"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.characters" name="characters" type="//@nestedPackage.1/@ownedType.131" implementationClass="org.eclipse.ocl.examples.library.string.StringCharactersOperation">
        <ownedComment body="Obtains the characters of oclText[self] as a sequence.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.compareTo..ocl.OclSelf" name="compareTo" type="Integer" implementationClass="org.eclipse.ocl.examples.library.string.StringCompareToOperation">
        <ownedComment body="The comparison of oclText[self] with oclText[that]. -ve if less than, 0 if equal, +ve if greater than.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.compareTo..ocl.OclSelf" name="that" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.concat..ocl.String" name="concat" type="String" implementationClass="org.eclipse.ocl.examples.library.string.StringConcatOperation">
        <ownedComment body="The concatenation of oclText[self] and s.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.concat..ocl.String" name="s" type="String"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.endsWith..ocl.String" name="endsWith" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.string.StringEndsWithOperation">
        <ownedComment body="Returns true if oclText[self] ends with the string s.&#xA;Every string ends with the empty string.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.endsWith..ocl.String" name="s" type="String"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.equalsIgnoreCase..ocl.String" name="equalsIgnoreCase" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.string.StringEqualsIgnoreCaseOperation">
        <ownedComment body="Queries whether s and oclText[self] are equivalent under case-insensitive collation.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.equalsIgnoreCase..ocl.String" name="s" type="String"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.indexOf..ocl.String" name="indexOf" type="Integer" implementationClass="org.eclipse.ocl.examples.library.string.StringIndexOfOperation">
        <ownedComment body="Queries the first index in oclText[self] at which s is a substring of oclText[self], or zero if s is not a substring of oclText[self].&#xA;The empty string is a substring of every string at index 1 (and also at all other indexes).&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.indexOf..ocl.String" name="s" type="String"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.lastIndexOf..ocl.String" name="lastIndexOf" type="Integer" implementationClass="org.eclipse.ocl.examples.library.string.StringLastIndexOfOperation">
        <ownedComment body="Queries the last in oclText[self] at which s is a substring of oclText[self], or zero if s is not a substring of oclText[self].&#xA;The empty string is a substring of every string at index oclText[self]-size()+1 (and also at all other indexes).&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.lastIndexOf..ocl.String" name="s" type="String"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.matches..ocl.String" name="matches" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.string.StringMatchesOperation">
        <ownedComment body="Use a regular expression match and return true if self matches regex, false otherwise.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.matches..ocl.String" name="regex" type="String"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.replaceAll..ocl.String..ocl.String" name="replaceAll" type="String" implementationClass="org.eclipse.ocl.examples.library.string.StringReplaceAllOperation" isInvalidating="true">
        <ownedComment body="Return a string derived from self by replacing all matches of regex by replacement.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.replaceAll..ocl.String..ocl.String" name="regex" type="String"/>
        <ownedParameter xmi:id="p1o.ocl.String.replaceAll..ocl.String..ocl.String" name="replacement" type="String"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.replaceFirst..ocl.String..ocl.String" name="replaceFirst" type="String" implementationClass="org.eclipse.ocl.examples.library.string.StringReplaceFirstOperation" isInvalidating="true">
        <ownedComment body="Return a string derived from self by replacing the first match of regex by replacement.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.replaceFirst..ocl.String..ocl.String" name="regex" type="String"/>
        <ownedParameter xmi:id="p1o.ocl.String.replaceFirst..ocl.String..ocl.String" name="replacement" type="String"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.size" name="size" type="Integer" implementationClass="org.eclipse.ocl.examples.library.string.StringSizeOperation">
        <ownedComment body="The number of characters in oclText[self].&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.startsWith..ocl.String" name="startsWith" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.string.StringStartsWithOperation">
        <ownedComment body="Returns true if oclText[self] starts with the string s.&#xA;Every string starts with the empty string.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.startsWith..ocl.String" name="s" type="String"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.substituteAll..ocl.String..ocl.String" name="substituteAll" type="String" implementationClass="org.eclipse.ocl.examples.library.string.StringSubstituteAllOperation">
        <ownedComment body="Return a string derived from self by replacing all occurrences of oldSubstring by newSubstring.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.substituteAll..ocl.String..ocl.String" name="oldSubstring" type="String"/>
        <ownedParameter xmi:id="p1o.ocl.String.substituteAll..ocl.String..ocl.String" name="newSubstring" type="String"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.substituteFirst..ocl.String..ocl.String" name="substituteFirst" type="String" implementationClass="org.eclipse.ocl.examples.library.string.StringSubstituteFirstOperation">
        <ownedComment body="Return a string derived from self by replacing the first occurrence of oldSubstring by newSubstring.&#xA;Returns invalid if there is no first occurrence.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.substituteFirst..ocl.String..ocl.String" name="oldSubstring" type="String"/>
        <ownedParameter xmi:id="p1o.ocl.String.substituteFirst..ocl.String..ocl.String" name="newSubstring" type="String"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.substring..ocl.Integer..ocl.Integer" name="substring" type="String" implementationClass="org.eclipse.ocl.examples.library.string.StringSubstringOperation" isInvalidating="true">
        <ownedComment body="The sub-string of oclText[self] starting at character number lower, up to and including character number upper. Character numbers run from 1 to self.size().&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.substring..ocl.Integer..ocl.Integer" name="lower" type="Integer"/>
        <ownedParameter xmi:id="p1o.ocl.String.substring..ocl.Integer..ocl.Integer" name="upper" type="Integer"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.toBoolean" name="toBoolean" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.string.StringToBooleanOperation" isInvalidating="true">
        <ownedComment body="Converts oclText[self] to a boolean value.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.toInteger" name="toInteger" type="Integer" implementationClass="org.eclipse.ocl.examples.library.string.StringToIntegerOperation" isInvalidating="true">
        <ownedComment body="Converts oclText[self] to an Integer value.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.toLower" name="toLower" type="String" implementationClass="org.eclipse.ocl.examples.library.string.StringToLowerCaseOperation">
        <ownedComment body="This is a deprecated variant of toLowerCase() preserving compatibility with traditional Eclipse OCL behaviour.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.toLowerCase" name="toLowerCase" type="String" implementationClass="org.eclipse.ocl.examples.library.string.StringToLowerCaseOperation">
        <ownedComment body="Converts oclText[self] to lower case, using the locale defined by looking up oclLocale in the current environment.&#xA;Otherwise, returns the same string as oclText[self].&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.toReal" name="toReal" type="Real" implementationClass="org.eclipse.ocl.examples.library.string.StringToRealOperation" isInvalidating="true">
        <ownedComment body="Converts oclText[self] to a Real value.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.toString" name="toString" type="String" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyToStringOperation">
        <ownedComment body="Returns oclText[self]."/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.toUpper" name="toUpper" type="String" implementationClass="org.eclipse.ocl.examples.library.string.StringToUpperCaseOperation">
        <ownedComment body="This is a deprecated variant of toUpperCase() preserving compatibility with traditional Eclipse OCL behaviour.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.toUpperCase" name="toUpperCase" type="String" implementationClass="org.eclipse.ocl.examples.library.string.StringToUpperCaseOperation">
        <ownedComment body="Converts oclText[self] to upper case, using the locale defined by looking up oclLocale in the current environment.&#xA;Otherwise, returns the same string as oclText[self].&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.tokenize" name="tokenize" type="//@nestedPackage.1/@ownedType.131" implementationClass="org.eclipse.ocl.examples.library.string.StringTokenizeOperation">
        <ownedComment body="Partition oclText[self] into a sequence substrings separated by any of space, line-feed, carriage-return, form-feed and horizontal-tab delimiters.&#xA;The delimiters are omitted from the return.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.tokenize..ocl.String" name="tokenize" type="//@nestedPackage.1/@ownedType.131" implementationClass="org.eclipse.ocl.examples.library.string.StringTokenizeOperation">
        <ownedComment body="Partition oclText[self] into a sequence substrings separated by characters in the delimiters. The delimiters are omitted from the return.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.tokenize..ocl.String" name="delimiters" type="String"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.tokenize..ocl.String..ocl.Boolean" name="tokenize" type="//@nestedPackage.1/@ownedType.131" implementationClass="org.eclipse.ocl.examples.library.string.StringTokenizeOperation">
        <ownedComment body="Partition oclText[self] into a sequence substrings separated by characters in the delimiters. If returnDelimeters is&#xA;true the returned sequence includes the delimiters, otherwise the delimiters are omitted.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.tokenize..ocl.String..ocl.Boolean" name="delimiters" type="String"/>
        <ownedParameter xmi:id="p1o.ocl.String.tokenize..ocl.String..ocl.Boolean" name="returnDelimiters" type="Boolean"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.trim" name="trim" type="String" implementationClass="org.eclipse.ocl.examples.library.string.StringTrimOperation">
        <ownedComment body="Return oclText[self] with leading and trailing whitespace removed.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.%62%..ocl.OclSelf" name=">" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.string.StringGreaterThanOperation" precedence="Z.RELATIONAL">
        <ownedComment body="True if oclText[self] is greater than s, using the locale defined by looking up oclLocale in the current environment.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.%62%..ocl.OclSelf" name="s" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.%60%..ocl.OclSelf" name="&lt;" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.string.StringLessThanOperation" precedence="Z.RELATIONAL">
        <ownedComment body="True if oclText[self] is less than s, using the locale defined by looking up oclLocale in the current environment.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.%60%..ocl.OclSelf" name="s" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.%60%%61%..ocl.OclSelf" name="&lt;=" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.string.StringLessThanEqualOperation" precedence="Z.RELATIONAL">
        <ownedComment body="True if oclText[self] is less than or equal to s, using the locale defined by looking up oclLocale in the current environment.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.%60%%61%..ocl.OclSelf" name="s" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.String.%62%%61%..ocl.OclSelf" name=">=" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.string.StringGreaterThanEqualOperation" precedence="Z.RELATIONAL">
        <ownedComment body="True if oclText[self] is greater than or equal to s, using the locale defined by looking up oclLocale in the current environment.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.String.%62%%61%..ocl.OclSelf" name="s" type="OclSelf"/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:PrimitiveType" xmi:id="UnlimitedNatural" name="UnlimitedNatural" superClass="Integer">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>Primitive</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="The standard type UnlimitedNatural is used to encode the non-negative values of a multiplicity specification.&#xA;This includes a special e[unlimited] value (*) that encodes the upper value of  a multiplicity specification.&#xA;UnlimitedNatural is itself an instance of the metatype UnlimitedNaturalType.&#xA;&#xA;Note that although UnlimitedNatural is a subclass of Integer, the e[unlimited] value cannot be represented as an Integer.&#xA;Any use of the e[unlimited] value as an integer or real is replaced by the oclText[invalid] value.&#xA;"/>
      <ownedOperation xmi:id="o.ocl.UnlimitedNatural.oclAsType..$$.Metaclass" name="oclAsType" type="T.ocl.UnlimitedNatural..oclAsTypeTT" implementationClass="org.eclipse.ocl.examples.library.numeric.UnlimitedNaturalOclAsTypeOperation">
        <ownedComment body="Evaluates to oclText[self], where oclText[self] is of the type identified by T.&#xA;The type T may be any classifier defined in the UML model;&#xA;if the actual type of oclText[self] at evaluation time does not conform to T,&#xA;then the oclAsType operation evaluates to oclText[invalid].&#xA;&#xA;The standard behavior is redefined for UnlimitedNatural. Numeric values may be converted to&#xA;Real or Integer, but the e[unlimited] value may not.&#xA;Conversion of e[unlimited] to Real or Integer returns oclText[invalid].&#xA;&#xA;"/>
        <ownedTemplateSignature xmi:id="s.o.ocl.UnlimitedNatural.oclAsType..$$.Metaclass">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.UnlimitedNatural..oclAsTypeTT" parameteredElement="T.ocl.UnlimitedNatural..oclAsTypeTT">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.UnlimitedNatural..oclAsTypeTT" name="TT" templateParameter="t.ocl.UnlimitedNatural..oclAsTypeTT"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0o.ocl.UnlimitedNatural.oclAsType..$$.Metaclass" name="type" type="//@nestedPackage.1/@ownedType.83"/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:BagType" xmi:id="Bag" name="Bag" superClass="//@nestedPackage.1/@ownedType.46" elementType="T.ocl..BagT">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>Collection</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="A bag is a collection with duplicates allowed. That is, one object can be an element of a bag many times.&#xA;There is no ordering defined on the elements in a bag.&#xA;Bag is itself an instance of the metatype BagType.&#xA;"/>
      <ownedTemplateSignature xmi:id="s.Bag">
        <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl..BagT" parameteredElement="T.ocl..BagT">
          <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl..BagT" name="T" templateParameter="t.ocl..BagT"/>
        </ownedParameter>
      </ownedTemplateSignature>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Bag.closure..T" name="closure" type="//@nestedPackage.1/@ownedType.142" implementationClass="org.eclipse.ocl.examples.library.iterator.ClosureIteration">
        <ownedComment body="The closure of applying body transitively to every distinct element of the source collection.&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.Bag.closure..T" name="lambda" type="//@nestedPackage.1/@ownedType.4"/>
        <ownedIterator xmi:id="i0i.ocl.Bag.closure..T" name="i" type="T.ocl..BagT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Bag.collect..T" name="collect" type="//@nestedPackage.1/@ownedType.28" implementationClass="org.eclipse.ocl.examples.library.iterator.CollectIteration">
        <ownedTemplateSignature xmi:id="s.i.ocl.Bag.collect..T">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Bag..collectV" parameteredElement="T.ocl.Bag..collectV">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Bag..collectV" name="V" templateParameter="t.ocl.Bag..collectV"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0i.ocl.Bag.collect..T" name="lambda" isRequired="false" type="//@nestedPackage.1/@ownedType.2"/>
        <ownedIterator xmi:id="i0i.ocl.Bag.collect..T" name="i" isRequired="false" type="T.ocl..BagT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Bag.collectNested..T" name="collectNested" type="//@nestedPackage.1/@ownedType.27" implementationClass="org.eclipse.ocl.examples.library.iterator.CollectNestedIteration">
        <ownedComment body="The Bag of elements which results from applying body to every member of the source nonordered collection.&#xA;"/>
        <ownedTemplateSignature xmi:id="s.i.ocl.Bag.collectNested..T">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Bag..collectNestedV" parameteredElement="T.ocl.Bag..collectNestedV">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Bag..collectNestedV" name="V" templateParameter="t.ocl.Bag..collectNestedV"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0i.ocl.Bag.collectNested..T" name="lambda" isRequired="false" type="//@nestedPackage.1/@ownedType.1"/>
        <ownedIterator xmi:id="i0i.ocl.Bag.collectNested..T" name="i" isRequired="false" type="T.ocl..BagT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Bag.reject..T" name="reject" type="Bag" implementationClass="org.eclipse.ocl.examples.library.iterator.RejectIteration">
        <ownedComment body="The sub-bag of the source bag for which body is oclText[false].&#xA;&#xA;oclCode[self->reject(iterator | body) = self->select(iterator | not body)].&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.Bag.reject..T" name="lambda" type="//@nestedPackage.1/@ownedType.0"/>
        <ownedIterator xmi:id="i0i.ocl.Bag.reject..T" name="i" isRequired="false" type="T.ocl..BagT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Bag.select..T" name="select" type="Bag" implementationClass="org.eclipse.ocl.examples.library.iterator.SelectIteration">
        <ownedComment body="The sub-bag of the source bag for which body is oclText[true].&#xA;&#xA;oclCode[self->select(iterator | body) =&#xA;self->iterate(iterator; result : Bag(T) = Bag{} |&#xA;if body then result->including(iterator)&#xA;else result&#xA;endif)]&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.Bag.select..T" name="lambda" type="//@nestedPackage.1/@ownedType.0"/>
        <ownedIterator xmi:id="i0i.ocl.Bag.select..T" name="i" isRequired="false" type="T.ocl..BagT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Bag.sortedBy..T" name="sortedBy" type="//@nestedPackage.1/@ownedType.132" implementationClass="org.eclipse.ocl.examples.library.iterator.SortedByIteration">
        <ownedComment body="Results in the Sequence containing all elements of the source collection.&#xA;The element for which body has the lowest value comes first, and so on.&#xA;The type of the body expression must have the &lt; operation defined.&#xA;The &lt; operation must return a Boolean value and must be transitive (i.e., if a &lt; b and b &lt; c then a &lt; c).&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.Bag.sortedBy..T" name="lambda" type="//@nestedPackage.1/@ownedType.3"/>
        <ownedIterator xmi:id="i0i.ocl.Bag.sortedBy..T" name="i" isRequired="false" type="T.ocl..BagT"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Bag.%61%..ocl.OclSelf" name="=" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyEqualOperation" precedence="Z.EQUALITY">
        <ownedComment body="True if oclText[self] and bag contain the same elements, the same number of times.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Bag.%61%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Bag.%60%%62%..ocl.OclSelf" name="&lt;>" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyNotEqualOperation" precedence="Z.EQUALITY">
        <ownedParameter xmi:id="p0o.ocl.Bag.%60%%62%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Bag.excluding..ocl.OclAny" name="excluding" type="Bag" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionExcludingOperation">
        <ownedComment body="The bag containing all elements of oclText[self] apart from all occurrences of object.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Bag.excluding..ocl.OclAny" name="object" isRequired="false" type="T.ocl.OclAny"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Bag.excludingAll..$$.Collection" name="excludingAll" type="Bag" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionExcludingAllOperation">
        <ownedComment body="The bag containing all elements of oclText[self] apart from all occurrences of all objects.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Bag.excludingAll..$$.Collection" name="objects" type="//@nestedPackage.1/@ownedType.60"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Bag.flatten" name="flatten" type="//@nestedPackage.1/@ownedType.29" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionFlattenOperation">
        <ownedComment body="Redefines the Collection operation. If the element type is not a collection type, this results in the same bag as oclText[self].&#xA;If the element type is a collection type, the result is the bag containing all the elements of all the recursively flattened elements of oclText[self].&#xA;"/>
        <ownedTemplateSignature xmi:id="s.o.ocl.Bag.flatten">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Bag..flattenT2" parameteredElement="T.ocl.Bag..flattenT2">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Bag..flattenT2" name="T2" templateParameter="t.ocl.Bag..flattenT2"/>
          </ownedParameter>
        </ownedTemplateSignature>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Bag.including..T" name="including" type="Bag" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionIncludingOperation">
        <ownedComment body="The bag containing all elements of oclText[self] plus object.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Bag.including..T" name="object" isRequired="false" type="T.ocl..BagT"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Bag.includingAll..$$.Collection" name="includingAll" type="Bag" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionIncludingAllOperation">
        <ownedComment body="The bag containing all elements of oclText[self] and objects.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Bag.includingAll..$$.Collection" name="objects" type="//@nestedPackage.1/@ownedType.46"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Bag.selectByKind..$$.Metaclass" name="selectByKind" type="//@nestedPackage.1/@ownedType.30" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionSelectByKindOperation">
        <ownedTemplateSignature xmi:id="s.o.ocl.Bag.selectByKind..$$.Metaclass">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Bag..selectByKindTT" parameteredElement="T.ocl.Bag..selectByKindTT">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Bag..selectByKindTT" name="TT" templateParameter="t.ocl.Bag..selectByKindTT"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0o.ocl.Bag.selectByKind..$$.Metaclass" name="type" type="//@nestedPackage.1/@ownedType.84"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Bag.selectByType..$$.Metaclass" name="selectByType" type="//@nestedPackage.1/@ownedType.31" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionSelectByTypeOperation">
        <ownedTemplateSignature xmi:id="s.o.ocl.Bag.selectByType..$$.Metaclass">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Bag..selectByTypeTT" parameteredElement="T.ocl.Bag..selectByTypeTT">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Bag..selectByTypeTT" name="TT" templateParameter="t.ocl.Bag..selectByTypeTT"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0o.ocl.Bag.selectByType..$$.Metaclass" name="type" type="//@nestedPackage.1/@ownedType.85"/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:Class" xmi:id="T.ocl.Class" name="Class" superClass="T.ocl.OclAny"/>
    <ownedType xsi:type="pivot:CollectionType" xmi:id="Collection" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl..CollectionT">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>Collection</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="Collection is the abstract supertype of all collection types in the OCL Standard Library.&#xA;Each occurrence of an object in a collection is called an element.&#xA;If an object occurs twice in a collection, there are two elements.&#xA;&#xA;This sub clause defines the properties on Collections that have identical semantics for all collection subtypes.&#xA;Some operations may be defined within the subtype as well,&#xA;which means that there is an additional postcondition or a more specialized return value.&#xA;Collection is itself an instance of the metatype CollectionType.&#xA;&#xA;The definition of several common operations is different for each subtype.&#xA;These operations are not mentioned in this sub clause.&#xA;&#xA;The semantics of the collection operations is given in the form of a postcondition that uses the IterateExp of the IteratorExp construct.&#xA;The semantics of those constructs is defined in Clause 10 (Semantics Described using UML).&#xA;In several cases the postcondition refers to other collection operations,&#xA;which in turn are defined in terms of the IterateExp or IteratorExp constructs.&#xA;&#xA;Well-formedness rules&#xA;&#xA;[1] A collection cannot contain oclText[invalid] values.&#xA;&#xA;context Collection&#xA;inv: self->forAll(not oclIsInvalid())"/>
      <ownedTemplateSignature xmi:id="s.Collection">
        <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl..CollectionT" parameteredElement="T.ocl..CollectionT">
          <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl..CollectionT" name="T" templateParameter="t.ocl..CollectionT">
            <ownedAttribute xmi:id="p.T.Collection" name="Collection" type="//@nestedPackage.1/@ownedType.33" implicit="true" opposite="p.ocl.Collection.elementType"/>
          </ownedParameteredElement>
        </ownedParameter>
      </ownedTemplateSignature>
      <ownedAttribute xmi:id="p.ocl.Collection.elementType" isStatic="true" name="elementType" type="T.ocl..CollectionT" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionElementTypeProperty" opposite="p.T.Collection">
        <ownedComment body="Evaluates to the type of the collection elements.&#xA;"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="p.ocl.Collection.lower" isStatic="true" name="lower" type="Integer" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionLowerProperty">
        <ownedComment body="Evaluates to the lower bound on the number of collection elements.&#xA;"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="p.ocl.Collection.upper" isStatic="true" name="upper" type="Integer" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionUpperProperty">
        <ownedComment body="Evaluates to the upper bound on the number of collection elements.&#xA;"/>
      </ownedAttribute>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Collection.any..T" name="any" isRequired="false" type="T.ocl..CollectionT" implementationClass="org.eclipse.ocl.examples.library.iterator.AnyIteration" isInvalidating="true">
        <ownedComment body="Returns any element in the source collection for which body evaluates to oclText[true].&#xA;If there is more than one element for which body is oclText[true], one of them is returned.&#xA;There must be at least one element fulfilling body, otherwise the result of this IteratorExp is oclText[null].&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.Collection.any..T" name="lambda" type="//@nestedPackage.1/@ownedType.5"/>
        <ownedIterator xmi:id="i0i.ocl.Collection.any..T" name="i" isRequired="false" type="T.ocl..CollectionT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Collection.collect..T" name="collect" type="//@nestedPackage.1/@ownedType.48" implementationClass="org.eclipse.ocl.examples.library.iterator.CollectIteration">
        <ownedComment body="The Collection of elements that results from applying body to every member of the source set.&#xA;The result is flattened. Notice that this is based on collectNested, which can be of different type depending on the type of source.&#xA;collectNested is defined individually for each subclass of CollectionType.&#xA;"/>
        <ownedTemplateSignature xmi:id="s.i.ocl.Collection.collect..T">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Collection..collectV" parameteredElement="T.ocl.Collection..collectV">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Collection..collectV" name="V" templateParameter="t.ocl.Collection..collectV"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0i.ocl.Collection.collect..T" name="lambda" isRequired="false" type="//@nestedPackage.1/@ownedType.7"/>
        <ownedIterator xmi:id="i0i.ocl.Collection.collect..T" name="i" isRequired="false" type="T.ocl..CollectionT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Collection.collectNested..T" name="collectNested" type="//@nestedPackage.1/@ownedType.47" implementationClass="org.eclipse.ocl.examples.library.iterator.CollectNestedIteration">
        <ownedComment body="The Collection of elements which results from applying body to every member of the source collection.&#xA;"/>
        <ownedTemplateSignature xmi:id="s.i.ocl.Collection.collectNested..T">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Collection..collectNestedV" parameteredElement="T.ocl.Collection..collectNestedV">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Collection..collectNestedV" name="V" templateParameter="t.ocl.Collection..collectNestedV"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0i.ocl.Collection.collectNested..T" name="lambda" isRequired="false" type="//@nestedPackage.1/@ownedType.6"/>
        <ownedIterator xmi:id="i0i.ocl.Collection.collectNested..T" name="i" isRequired="false" type="T.ocl..CollectionT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Collection.exists..T" name="exists" isRequired="false" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.iterator.ExistsIteration" isValidating="true">
        <ownedComment body="Results in oclText[true] if body evaluates to oclText[true] for at least one element in the source collection.&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.Collection.exists..T" name="lambda" isRequired="false" type="//@nestedPackage.1/@ownedType.5"/>
        <ownedIterator xmi:id="i0i.ocl.Collection.exists..T" name="i" isRequired="false" type="T.ocl..CollectionT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Collection.exists..T..T" name="exists" isRequired="false" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.iterator.ExistsIteration" isValidating="true">
        <ownedParameter xmi:id="p0i.ocl.Collection.exists..T..T" name="lambda" isRequired="false" type="//@nestedPackage.1/@ownedType.5"/>
        <ownedIterator xmi:id="i0i.ocl.Collection.exists..T..T" name="i" isRequired="false" type="T.ocl..CollectionT"/>
        <ownedIterator xmi:id="i1i.ocl.Collection.exists..T..T" name="j" isRequired="false" type="T.ocl..CollectionT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Collection.forAll..T" name="forAll" isRequired="false" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.iterator.ForAllIteration" isValidating="true">
        <ownedComment body="Results in oclText[true] if the body expression evaluates to oclText[true] for each element in the source collection; otherwise, result is oclText[false].&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.Collection.forAll..T" name="lambda" isRequired="false" type="//@nestedPackage.1/@ownedType.5"/>
        <ownedIterator xmi:id="i0i.ocl.Collection.forAll..T" name="i" isRequired="false" type="T.ocl..CollectionT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Collection.forAll..T..T" name="forAll" isRequired="false" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.iterator.ForAllIteration" isValidating="true">
        <ownedParameter xmi:id="p0i.ocl.Collection.forAll..T..T" name="lambda" isRequired="false" type="//@nestedPackage.1/@ownedType.5"/>
        <ownedIterator xmi:id="i0i.ocl.Collection.forAll..T..T" name="i" isRequired="false" type="T.ocl..CollectionT"/>
        <ownedIterator xmi:id="i1i.ocl.Collection.forAll..T..T" name="j" isRequired="false" type="T.ocl..CollectionT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Collection.isUnique..T" name="isUnique" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.iterator.IsUniqueIteration">
        <ownedComment body="Results in oclText[true] if body evaluates to a different value for each element in the source collection; otherwise, result is oclText[false].&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.Collection.isUnique..T" name="lambda" isRequired="false" type="//@nestedPackage.1/@ownedType.9"/>
        <ownedIterator xmi:id="i0i.ocl.Collection.isUnique..T" name="i" isRequired="false" type="T.ocl..CollectionT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Collection.iterate..T" name="iterate" isRequired="false" type="T.ocl.Collection..iterateTacc" implementationClass="org.eclipse.ocl.examples.library.iterator.IterateIteration">
        <ownedTemplateSignature xmi:id="s.i.ocl.Collection.iterate..T">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Collection..iterateTacc" parameteredElement="T.ocl.Collection..iterateTacc">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Collection..iterateTacc" name="Tacc" templateParameter="t.ocl.Collection..iterateTacc"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0i.ocl.Collection.iterate..T" name="lambda" isRequired="false" type="//@nestedPackage.1/@ownedType.8"/>
        <ownedAccumulator xmi:id="a0i.ocl.Collection.iterate..T" name="acc" isRequired="false" type="T.ocl.Collection..iterateTacc"/>
        <ownedIterator xmi:id="i0i.ocl.Collection.iterate..T" name="i" isRequired="false" type="T.ocl..CollectionT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Collection.one..T" name="one" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.iterator.OneIteration">
        <ownedComment body="Results in oclText[true] if there is exactly one element in the source collection for which body is oclText[true].&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.Collection.one..T" name="lambda" type="//@nestedPackage.1/@ownedType.5"/>
        <ownedIterator xmi:id="i0i.ocl.Collection.one..T" name="i" isRequired="false" type="T.ocl..CollectionT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Collection.reject..T" name="reject" type="Collection" implementationClass="org.eclipse.ocl.examples.library.iterator.RejectIteration">
        <ownedComment body="The sub-collection of the source collection for which body is oclText[false].&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.Collection.reject..T" name="lambda" type="//@nestedPackage.1/@ownedType.5"/>
        <ownedIterator xmi:id="i0i.ocl.Collection.reject..T" name="i" isRequired="false" type="T.ocl..CollectionT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Collection.select..T" name="select" type="Collection" implementationClass="org.eclipse.ocl.examples.library.iterator.SelectIteration">
        <ownedComment body="The sub-collection of the source collection for which body is oclText[true].&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.Collection.select..T" name="lambda" type="//@nestedPackage.1/@ownedType.5"/>
        <ownedIterator xmi:id="i0i.ocl.Collection.select..T" name="i" isRequired="false" type="T.ocl..CollectionT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Collection.sortedBy..T" name="sortedBy" type="//@nestedPackage.1/@ownedType.133" implementationClass="org.eclipse.ocl.examples.library.iterator.SortedByIteration">
        <ownedComment body="Results in the Collection containing all elements of the source collection.&#xA;The element for which body has the lowest value comes first, and so on.&#xA;The type of the body expression must have the &lt; operation defined.&#xA;The &lt; operation must return a Boolean value and must be transitive (i.e., if a &lt; b and b &lt; c then a &lt; c).&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.Collection.sortedBy..T" name="lambda" type="//@nestedPackage.1/@ownedType.9"/>
        <ownedIterator xmi:id="i0i.ocl.Collection.sortedBy..T" name="i" isRequired="false" type="T.ocl..CollectionT"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.%61%..ocl.OclSelf" name="=" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyEqualOperation" precedence="Z.EQUALITY">
        <ownedComment body="True if c is a collection of the same kind as oclText[self] and contains the same elements in the same quantities and in the same order,&#xA;in the case of an ordered collection type.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Collection.%61%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.%60%%62%..ocl.OclSelf" name="&lt;>" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyNotEqualOperation" precedence="Z.EQUALITY">
        <ownedComment body="True if c is not equal to oclText[self].&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Collection.%60%%62%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.asBag" name="asBag" type="//@nestedPackage.1/@ownedType.32" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionAsBagOperation">
        <ownedComment body="The Bag that contains all the elements from oclText[self].&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.asOrderedSet" name="asOrderedSet" type="//@nestedPackage.1/@ownedType.122" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionAsOrderedSetOperation">
        <ownedComment body="An OrderedSet that contains all the elements from oclText[self], with duplicates removed,&#xA;in an order dependent on the particular concrete collection type.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.asSequence" name="asSequence" type="//@nestedPackage.1/@ownedType.133" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionAsSequenceOperation">
        <ownedComment body="A Sequence that contains all the elements from oclText[self], in an order dependent on the particular concrete collection type.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.asSet" name="asSet" type="//@nestedPackage.1/@ownedType.143" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionAsSetOperation">
        <ownedComment body="The Set containing all the elements from oclText[self], with duplicates removed.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.count..ocl.OclAny" name="count" type="Integer" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionCountOperation">
        <ownedComment body="The number of times that object occurs in the collection oclText[self].&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Collection.count..ocl.OclAny" name="object" isRequired="false" type="T.ocl.OclAny"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.excludes..ocl.OclAny" name="excludes" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionExcludesOperation">
        <ownedComment body="True if object is not an element of oclText[self], oclText[false] otherwise.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Collection.excludes..ocl.OclAny" name="object" isRequired="false" type="T.ocl.OclAny"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.excludesAll..$$.Collection" name="excludesAll" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionExcludesAllOperation">
        <ownedComment body="Does oclText[self] contain none of the elements of c2 ?&#xA;"/>
        <ownedTemplateSignature xmi:id="s.o.ocl.Collection.excludesAll..$$.Collection">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Collection..excludesAllT2" parameteredElement="T.ocl.Collection..excludesAllT2">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Collection..excludesAllT2" name="T2" templateParameter="t.ocl.Collection..excludesAllT2"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0o.ocl.Collection.excludesAll..$$.Collection" name="c2" type="//@nestedPackage.1/@ownedType.49"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.excluding..ocl.OclAny" name="excluding" type="Collection" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionExcludingOperation">
        <ownedComment body="The collection containing all elements of oclText[self] apart from object.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Collection.excluding..ocl.OclAny" name="object" isRequired="false" type="T.ocl.OclAny"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.excludingAll..$$.Collection" name="excludingAll" type="Collection" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionExcludingAllOperation">
        <ownedComment body="The collection containing all elements of oclText[self] apart from all occurrences of all objects.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Collection.excludingAll..$$.Collection" name="objects" type="//@nestedPackage.1/@ownedType.60"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.flatten" name="flatten" type="//@nestedPackage.1/@ownedType.50" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionFlattenOperation">
        <ownedComment body="If the element type is not a collection type, this results in the same collection as oclText[self].&#xA;If the element type is a collection type, the result is a collection containing all the elements of all the recursively flattened elements of oclText[self].&#xA;"/>
        <ownedTemplateSignature xmi:id="s.o.ocl.Collection.flatten">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Collection..flattenT2" parameteredElement="T.ocl.Collection..flattenT2">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Collection..flattenT2" name="T2" templateParameter="t.ocl.Collection..flattenT2"/>
          </ownedParameter>
        </ownedTemplateSignature>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.includes..ocl.OclAny" name="includes" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionIncludesOperation">
        <ownedComment body="True if object is an element of oclText[self], oclText[false] otherwise.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Collection.includes..ocl.OclAny" name="object" isRequired="false" type="T.ocl.OclAny"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.includesAll..$$.Collection" name="includesAll" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionIncludesAllOperation">
        <ownedComment body="Does oclText[self] contain all the elements of c2 ?&#xA;"/>
        <ownedTemplateSignature xmi:id="s.o.ocl.Collection.includesAll..$$.Collection">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Collection..includesAllT2" parameteredElement="T.ocl.Collection..includesAllT2">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Collection..includesAllT2" name="T2" templateParameter="t.ocl.Collection..includesAllT2"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0o.ocl.Collection.includesAll..$$.Collection" name="c2" type="//@nestedPackage.1/@ownedType.51"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.including..T" name="including" type="Collection" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionIncludingOperation">
        <ownedComment body="The collection containing all elements of oclText[self] plus object.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Collection.including..T" name="object" isRequired="false" type="T.ocl..CollectionT"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.includingAll..ocl.Collection" name="includingAll" type="Collection" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionIncludingAllOperation">
        <ownedComment body="The collection containing all elements of oclText[self] and objects.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Collection.includingAll..ocl.Collection" name="objects" type="Collection"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.intersection..ocl.Collection" name="intersection" type="//@nestedPackage.1/@ownedType.32" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionIntersectionOperation">
        <ownedComment body="The intersection of oclText[self] and bag; the bag of all elements that are in both oclText[self] and c.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Collection.intersection..ocl.Collection" name="c" type="Collection"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.intersection..$$.UniqueCollection" name="intersection" type="//@nestedPackage.1/@ownedType.143" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionIntersectionOperation">
        <ownedComment body="The intersection of oclText[self] and a unique collection; the set of all elements that are in both oclText[self] and u.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Collection.intersection..$$.UniqueCollection" name="u" type="//@nestedPackage.1/@ownedType.152"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.isEmpty" name="isEmpty" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionIsEmptyOperation">
        <ownedComment body="Is oclText[self] the empty collection?&#xA;&#xA;Note: oclText[null->isEmpty()] returns oclText[true] in virtue of the implicit casting from oclText[null] to oclText[Bag{}].&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.max" name="max" type="T.ocl..CollectionT" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionMaxOperation">
        <ownedComment body="The element with the maximum value of all elements in oclText[self].&#xA;Elements must be of a type supporting the max operation.&#xA;The max operation - supported by the elements - must take one parameter of type T and be both associative and commutative.&#xA;UnlimitedNatural, Integer and Real fulfill this condition.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.min" name="min" type="T.ocl..CollectionT" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionMinOperation">
        <ownedComment body="The element with the minimum value of all elements in oclText[self].&#xA;Elements must be of a type supporting the min operation.&#xA;The min operation - supported by the elements - must take one parameter of type T and be both associative and commutative.&#xA;UnlimitedNatural, Integer and Real fulfill this condition.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.notEmpty" name="notEmpty" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionNotEmptyOperation">
        <ownedComment body="Is oclText[self] not the empty collection?&#xA;&#xA;oclText[null->notEmpty()] returns oclText[false] in virtue of the implicit casting from oclText[null] to oclText[Bag{}].&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.product..$$.Collection" name="product" type="//@nestedPackage.1/@ownedType.141" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionProductOperation">
        <ownedComment body="The cartesian product operation of oclText[self] and c2.&#xA;"/>
        <ownedTemplateSignature xmi:id="s.o.ocl.Collection.product..$$.Collection">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Collection..productT2" parameteredElement="T.ocl.Collection..productT2">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Collection..productT2" name="T2" templateParameter="t.ocl.Collection..productT2"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0o.ocl.Collection.product..$$.Collection" name="c2" type="//@nestedPackage.1/@ownedType.52"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.selectByKind..$$.Metaclass" name="selectByKind" type="//@nestedPackage.1/@ownedType.53" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionSelectByKindOperation">
        <ownedTemplateSignature xmi:id="s.o.ocl.Collection.selectByKind..$$.Metaclass">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Collection..selectByKindTT" parameteredElement="T.ocl.Collection..selectByKindTT">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Collection..selectByKindTT" name="TT" templateParameter="t.ocl.Collection..selectByKindTT"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0o.ocl.Collection.selectByKind..$$.Metaclass" name="type" type="//@nestedPackage.1/@ownedType.86"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.selectByType..$$.Metaclass" name="selectByType" type="//@nestedPackage.1/@ownedType.54" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionSelectByTypeOperation">
        <ownedTemplateSignature xmi:id="s.o.ocl.Collection.selectByType..$$.Metaclass">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Collection..selectByTypeTT" parameteredElement="T.ocl.Collection..selectByTypeTT">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Collection..selectByTypeTT" name="TT" templateParameter="t.ocl.Collection..selectByTypeTT"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0o.ocl.Collection.selectByType..$$.Metaclass" name="type" type="//@nestedPackage.1/@ownedType.87"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.size" name="size" type="Integer" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionSizeOperation">
        <ownedComment body="The number of elements in the collection oclText[self].&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.sum" name="sum" type="T.ocl..CollectionT" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionSumOperation">
        <ownedComment body="The addition of all elements in oclText[self].&#xA;Elements must be of an oclText[OclSummable] type to provide the zero() and sum() operations.&#xA;The e[sum] operation must be both associative: a.sum(b).sum(c) = a.sum(b.sum(c)), and commutative: a.sum(b) = b.sum(a).&#xA;UnlimitedNatural, Integer and Real fulfill this condition.&#xA;&#xA;If the e[sum] operation is not both associative and commutative, the e[sum] expression is not well-formed,&#xA;which may result in unpredictable results during evaluation.&#xA;If an implementation is able to detect a lack of associativity or commutativity,&#xA;the implementation may bypass the evaluation and return an oclText[invalid] result.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Collection.union..ocl.Collection" name="union" type="//@nestedPackage.1/@ownedType.32" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionUnionOperation">
        <ownedComment body="The bag consisting of all elements in oclText[self] and all elements in c.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Collection.union..ocl.Collection" name="c" type="Collection"/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:Class" xmi:id="T.ocl.Enumeration" name="Enumeration" superClass="T.ocl.OclAny">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>UML</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="The Enumeration type is the type of an OrderedSet of EnumerationLiteral.&#xA;"/>
      <ownedAttribute xmi:id="p.ocl.Enumeration.allLiterals" isStatic="true" name="allLiterals" type="//@nestedPackage.1/@ownedType.123" implementationClass="org.eclipse.ocl.examples.library.enumeration.EnumerationOwnedLiteralProperty" opposite="p.ocl.EnumerationLiteral.Enumeration">
        <ownedComment body="Evaluates to the literals of the enumeration.&#xA;"/>
      </ownedAttribute>
      <ownedOperation xmi:id="o.ocl.Enumeration.allInstances" isStatic="true" name="allInstances" type="//@nestedPackage.1/@ownedType.145" implementationClass="org.eclipse.ocl.examples.library.enumeration.EnumerationAllInstancesOperation">
        <ownedComment body="Return a set of all enumeration values of oclText[self]."/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:Class" xmi:id="T.ocl.EnumerationLiteral" name="EnumerationLiteral" superClass="T.ocl.OclAny">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>UML</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="The standard type EnumerationLiteral represents a named constant value of an Enumeration.&#xA;"/>
      <ownedAttribute xmi:id="p.ocl.EnumerationLiteral.Enumeration" name="Enumeration" type="//@nestedPackage.1/@ownedType.34" implicit="true" opposite="p.ocl.Enumeration.allLiterals"/>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" xmi:id="Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="T.ocl..MetaclassT">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>OCL</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedTemplateSignature xmi:id="s.Metaclass">
        <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl..MetaclassT" parameteredElement="T.ocl..MetaclassT">
          <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl..MetaclassT" name="T" templateParameter="t.ocl..MetaclassT">
            <ownedAttribute xmi:id="p.T.Metaclass" name="Metaclass" type="//@nestedPackage.1/@ownedType.35" implicit="true" opposite="p.ocl.Metaclass.instanceType"/>
          </ownedParameteredElement>
        </ownedParameter>
      </ownedTemplateSignature>
      <ownedAttribute xmi:id="p.ocl.Metaclass.instanceType" name="instanceType" type="T.ocl..MetaclassT" implementationClass="org.eclipse.ocl.examples.library.classifier.MetaclassInstanceTypeProperty" opposite="p.T.Metaclass">
        <ownedComment body="Evaluates to the type of instances.&#xA;"/>
      </ownedAttribute>
    </ownedType>
    <ownedType xsi:type="pivot:AnyType" xmi:id="T.ocl.OclAny" name="OclAny">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>OCL</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="All types in the UML model and the primitive and collection types in the OCL standard library conforms to the type OclAny.&#xA;Conceptually, OclAny behaves as a supertype for all the types.&#xA;Features of OclAny are available on each object in all OCL expressions.&#xA;OclAny is itself an instance of the metatype AnyType.&#xA;&#xA;All classes in a UML model inherit all operations defined on OclAny.&#xA;To avoid name conflicts between properties in the model and the properties inherited from OclAny,&#xA;all names on the properties of OclAny start with ‘ocl.’&#xA;Although theoretically there may still be name conflicts, they can be avoided.&#xA;One can also use qualification by OclAny (name of the type) to explicitly refer to the OclAny properties.&#xA;&#xA;Operations of OclAny, where the instance of OclAny is called object.&#xA;"/>
      <ownedOperation xmi:id="o.ocl.OclAny.%61%..ocl.OclSelf" name="=" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyEqualOperation" precedence="Z.EQUALITY">
        <ownedComment body="True if oclText[self] is the same object as object2. Infix operator.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OclAny.%61%..ocl.OclSelf" name="object2" type="OclSelf"/>
        <postcondition>
          <specification xsi:type="pivot:ExpressionInOCL" type="Boolean">
            <body>result = (self = object2)</body>
            <language>OCL</language>
            <bodyExpression xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
              <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.11/@ownedOperation.0/@postcondition.0/@specification/@resultVariable"/>
              <argument xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.OclAny.%61%..ocl.OclSelf">
                <source xsi:type="pivot:VariableExp" type="T.ocl.OclAny" referredVariable="//@nestedPackage.0/@ownedType.11/@ownedOperation.0/@postcondition.0/@specification/@contextVariable"/>
                <argument xsi:type="pivot:VariableExp" type="T.ocl.OclAny" referredVariable="//@nestedPackage.0/@ownedType.11/@ownedOperation.0/@postcondition.0/@specification/@parameterVariable.0"/>
              </argument>
            </bodyExpression>
            <contextVariable name="self" type="T.ocl.OclAny"/>
            <parameterVariable name="object2" type="T.ocl.OclAny" representedParameter="p0o.ocl.OclAny.%61%..ocl.OclSelf"/>
            <resultVariable name="result" type="Boolean"/>
          </specification>
        </postcondition>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclAny.%60%%62%..ocl.OclSelf" name="&lt;>" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyNotEqualOperation" precedence="Z.EQUALITY">
        <ownedComment body="True if oclText[self] is a different object from object2. Infix operator.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OclAny.%60%%62%..ocl.OclSelf" name="object2" type="OclSelf"/>
        <postcondition>
          <specification xsi:type="pivot:ExpressionInOCL" type="Boolean">
            <body>result = not (self = object2)</body>
            <language>OCL</language>
            <bodyExpression xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
              <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.11/@ownedOperation.1/@postcondition.0/@specification/@resultVariable"/>
              <argument xsi:type="pivot:OperationCallExp" name="not" isRequired="false" type="Boolean" referredOperation="o.ocl.Boolean.not">
                <source xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.OclAny.%61%..ocl.OclSelf">
                  <source xsi:type="pivot:VariableExp" type="T.ocl.OclAny" referredVariable="//@nestedPackage.0/@ownedType.11/@ownedOperation.1/@postcondition.0/@specification/@contextVariable"/>
                  <argument xsi:type="pivot:VariableExp" type="T.ocl.OclAny" referredVariable="//@nestedPackage.0/@ownedType.11/@ownedOperation.1/@postcondition.0/@specification/@parameterVariable.0"/>
                </source>
              </argument>
            </bodyExpression>
            <contextVariable name="self" type="T.ocl.OclAny"/>
            <parameterVariable name="object2" type="T.ocl.OclAny" representedParameter="p0o.ocl.OclAny.%60%%62%..ocl.OclSelf"/>
            <resultVariable name="result" type="Boolean"/>
          </specification>
        </postcondition>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclAny.oclAsSet" name="oclAsSet" type="//@nestedPackage.1/@ownedType.145" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyOclAsSetOperation">
        <ownedComment body="Returns a Set with oclText[self] as the sole content, unless oclText[self] is oclText[null] in which case returns an empty set,"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclAny.oclAsType..$$.Metaclass" name="oclAsType" isRequired="false" type="T.ocl.OclAny..oclAsTypeTT" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyOclAsTypeOperation">
        <ownedComment body="Evaluates to oclText[self], where oclText[self] is of the type identified by T.&#xA;The type T may be any classifier defined in the UML model;&#xA;if the actual type of oclText[self] at evaluation time does not conform to T,&#xA;then the oclAsType operation evaluates to oclText[invalid].&#xA;&#xA;In the case of feature redefinition, casting an object to a supertype of its actual type&#xA;does not access the supertype’s definition of the feature;&#xA;according to the semantics of redefinition, the redefined feature simply does not exist for the object.&#xA;However, when casting to a supertype, any features additionally defined by the subtype are suppressed.&#xA;&#xA;"/>
        <ownedTemplateSignature xmi:id="s.o.ocl.OclAny.oclAsType..$$.Metaclass">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.OclAny..oclAsTypeTT" parameteredElement="T.ocl.OclAny..oclAsTypeTT">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.OclAny..oclAsTypeTT" name="TT" templateParameter="t.ocl.OclAny..oclAsTypeTT"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0o.ocl.OclAny.oclAsType..$$.Metaclass" name="type" type="//@nestedPackage.1/@ownedType.88"/>
        <postcondition xmi:id="c+ocl.OclAny.oclAsType.IsSelf" name="IsSelf">
          <specification xsi:type="pivot:ExpressionInOCL" type="Boolean">
            <body>result = self</body>
            <language>OCL</language>
            <bodyExpression xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.OclAny.%61%..ocl.OclSelf">
              <source xsi:type="pivot:VariableExp" type="T.ocl.OclAny..oclAsTypeTT" referredVariable="//@nestedPackage.0/@ownedType.11/@ownedOperation.3/@postcondition.0/@specification/@resultVariable"/>
              <argument xsi:type="pivot:VariableExp" type="T.ocl.OclAny" referredVariable="//@nestedPackage.0/@ownedType.11/@ownedOperation.3/@postcondition.0/@specification/@contextVariable"/>
            </bodyExpression>
            <contextVariable name="self" type="T.ocl.OclAny"/>
            <parameterVariable name="type" type="//@nestedPackage.1/@ownedType.88" representedParameter="p0o.ocl.OclAny.oclAsType..$$.Metaclass"/>
            <resultVariable name="result" type="T.ocl.OclAny..oclAsTypeTT"/>
          </specification>
        </postcondition>
        <postcondition xmi:id="c+ocl.OclAny.oclAsType.IsType" name="IsType">
          <specification xsi:type="pivot:ExpressionInOCL" type="Boolean">
            <body>result.oclIsKindOf(type)</body>
            <language>OCL</language>
            <bodyExpression xsi:type="pivot:OperationCallExp" type="Boolean" referredOperation="o.ocl.OclAny.oclIsKindOf..$$.Metaclass">
              <source xsi:type="pivot:VariableExp" type="T.ocl.OclAny..oclAsTypeTT" referredVariable="//@nestedPackage.0/@ownedType.11/@ownedOperation.3/@postcondition.1/@specification/@resultVariable"/>
              <argument xsi:type="pivot:VariableExp" type="//@nestedPackage.1/@ownedType.88" referredVariable="//@nestedPackage.0/@ownedType.11/@ownedOperation.3/@postcondition.1/@specification/@parameterVariable.0"/>
            </bodyExpression>
            <contextVariable name="self" type="T.ocl.OclAny"/>
            <parameterVariable name="type" type="//@nestedPackage.1/@ownedType.88" representedParameter="p0o.ocl.OclAny.oclAsType..$$.Metaclass"/>
            <resultVariable name="result" type="T.ocl.OclAny..oclAsTypeTT"/>
          </specification>
        </postcondition>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclAny.oclIsInState..ocl.OclState" name="oclIsInState" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyOclIsInStateOperation">
        <ownedComment body="Evaluates to oclText[true] if the oclText[self] is in the state indentified by statespec.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OclAny.oclIsInState..ocl.OclState" name="statespec" type="T.ocl.OclState"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclAny.oclIsInvalid" name="oclIsInvalid" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyOclIsInvalidOperation" isValidating="true">
        <ownedComment body="Evaluates to oclText[true] if the oclText[self] is equal to OclInvalid.&#xA;"/>
        <postcondition>
          <specification xsi:type="pivot:ExpressionInOCL" type="Boolean">
            <body>result = self.oclIsTypeOf(OclInvalid)</body>
            <language>OCL</language>
            <bodyExpression xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
              <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.11/@ownedOperation.5/@postcondition.0/@specification/@resultVariable"/>
              <argument xsi:type="pivot:OperationCallExp" type="Boolean" referredOperation="o.ocl.OclAny.oclIsTypeOf..$$.Metaclass">
                <source xsi:type="pivot:VariableExp" type="T.ocl.OclAny" referredVariable="//@nestedPackage.0/@ownedType.11/@ownedOperation.5/@postcondition.0/@specification/@contextVariable"/>
                <argument xsi:type="pivot:TypeExp" type="//@nestedPackage.1/@ownedType.94" referredType="T.ocl.OclInvalid"/>
              </argument>
            </bodyExpression>
            <contextVariable name="self" type="T.ocl.OclAny"/>
            <resultVariable name="result" type="Boolean"/>
          </specification>
        </postcondition>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclAny.oclIsKindOf..$$.Metaclass" name="oclIsKindOf" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyOclIsKindOfOperation">
        <ownedComment body="Evaluates to oclText[true] if the type of oclText[self] conforms to t.&#xA;That is, oclText[self] is of type t or a subtype of t.&#xA;"/>
        <ownedTemplateSignature xmi:id="s.o.ocl.OclAny.oclIsKindOf..$$.Metaclass">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.OclAny..oclIsKindOfT" parameteredElement="T.ocl.OclAny..oclIsKindOfT">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.OclAny..oclIsKindOfT" name="T" templateParameter="t.ocl.OclAny..oclIsKindOfT"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0o.ocl.OclAny.oclIsKindOf..$$.Metaclass" name="type" type="//@nestedPackage.1/@ownedType.89"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclAny.oclIsNew" name="oclIsNew" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyUnsupportedOperation">
        <ownedComment body="Can only be used in a postcondition.&#xA;Evaluates to oclText[true] if the oclText[self] is created during performing the operation (for instance, it didn’t exist at precondition time).&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclAny.oclIsTypeOf..$$.Metaclass" name="oclIsTypeOf" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyOclIsTypeOfOperation">
        <ownedComment body="Evaluates to oclText[true] if oclText[self] is of the type t but not a subtype of t"/>
        <ownedTemplateSignature xmi:id="s.o.ocl.OclAny.oclIsTypeOf..$$.Metaclass">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.OclAny..oclIsTypeOfT" parameteredElement="T.ocl.OclAny..oclIsTypeOfT">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.OclAny..oclIsTypeOfT" name="T" templateParameter="t.ocl.OclAny..oclIsTypeOfT"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0o.ocl.OclAny.oclIsTypeOf..$$.Metaclass" name="type" type="//@nestedPackage.1/@ownedType.90"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclAny.oclIsUndefined" name="oclIsUndefined" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyOclIsUndefinedOperation" isValidating="true">
        <ownedComment body="Evaluates to oclText[true] if the oclText[self] is equal to oclText[invalid] or equal to oclText[null].&#xA;"/>
        <postcondition>
          <specification xsi:type="pivot:ExpressionInOCL" isRequired="false" type="Boolean">
            <body>result = self.oclIsTypeOf( OclVoid ) or self.oclIsTypeOf(OclInvalid)</body>
            <language>OCL</language>
            <bodyExpression xsi:type="pivot:OperationCallExp" name="or" isRequired="false" type="Boolean" referredOperation="o.ocl.Boolean.or..ocl.Boolean">
              <source xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Boolean.%61%..ocl.OclSelf">
                <source xsi:type="pivot:VariableExp" type="Boolean" referredVariable="//@nestedPackage.0/@ownedType.11/@ownedOperation.9/@postcondition.0/@specification/@resultVariable"/>
                <argument xsi:type="pivot:OperationCallExp" type="Boolean" referredOperation="o.ocl.OclAny.oclIsTypeOf..$$.Metaclass">
                  <source xsi:type="pivot:VariableExp" type="T.ocl.OclAny" referredVariable="//@nestedPackage.0/@ownedType.11/@ownedOperation.9/@postcondition.0/@specification/@contextVariable"/>
                  <argument xsi:type="pivot:TypeExp" type="//@nestedPackage.1/@ownedType.96" referredType="T.ocl.OclVoid"/>
                </argument>
              </source>
              <argument xsi:type="pivot:OperationCallExp" type="Boolean" referredOperation="o.ocl.OclAny.oclIsTypeOf..$$.Metaclass">
                <source xsi:type="pivot:VariableExp" type="T.ocl.OclAny" referredVariable="//@nestedPackage.0/@ownedType.11/@ownedOperation.9/@postcondition.0/@specification/@contextVariable"/>
                <argument xsi:type="pivot:TypeExp" type="//@nestedPackage.1/@ownedType.94" referredType="T.ocl.OclInvalid"/>
              </argument>
            </bodyExpression>
            <contextVariable name="self" type="T.ocl.OclAny"/>
            <resultVariable name="result" type="Boolean"/>
          </specification>
        </postcondition>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclAny.oclLog" name="oclLog" type="OclSelf" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyOclLogOperation">
        <ownedComment body="Evaluates to the self, with the side effect of generating a log message comprising self.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclAny.oclLog..ocl.String" name="oclLog" type="OclSelf" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyOclLogOperation">
        <ownedComment body="Evaluates to the self, with the side effect of generating a log message comprising message followed by self.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OclAny.oclLog..ocl.String" name="message" type="String"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclAny.oclType" name="oclType" type="//@nestedPackage.1/@ownedType.95" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyOclTypeOperation">
        <ownedComment body="Evaluates to the type of which oclText[self] is an instance.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclAny.toString" name="toString" type="String" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyToStringOperation">
        <ownedComment body="Returns a string representation of oclText[self]."/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:Class" xmi:id="T.ocl.OclComparable" name="OclComparable" superClass="T.ocl.OclAny">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>OCL</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="The type OclComparable defines the compareTo operation used by the sortedBy iteration. Only types that provide a derived&#xA;compareTo implementation may be sorted.&#xA;"/>
      <ownedOperation xmi:id="o.ocl.OclComparable.compareTo..ocl.OclSelf" name="compareTo" type="Integer" implementationClass="org.eclipse.ocl.examples.library.oclany.OclComparableCompareToOperation">
        <ownedComment body="Return -ve, 0, +ve according to whether self is less than, equal to , or greater than that.&#xA;&#xA;The compareTo operation should be commutative."/>
        <ownedParameter xmi:id="p0o.ocl.OclComparable.compareTo..ocl.OclSelf" name="that" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclComparable.%62%..ocl.OclSelf" name=">" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclComparableGreaterThanOperation" precedence="Z.RELATIONAL">
        <ownedComment body="True if oclText[self] is greater than oclText[that].&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OclComparable.%62%..ocl.OclSelf" name="that" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclComparable.%60%..ocl.OclSelf" name="&lt;" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclComparableLessThanOperation" precedence="Z.RELATIONAL">
        <ownedComment body="True if oclText[self] is less than oclText[that].&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OclComparable.%60%..ocl.OclSelf" name="that" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclComparable.%60%%61%..ocl.OclSelf" name="&lt;=" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclComparableLessThanEqualOperation" precedence="Z.RELATIONAL">
        <ownedComment body="True if oclText[self] is less than or equal to oclText[that].&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OclComparable.%60%%61%..ocl.OclSelf" name="that" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclComparable.%62%%61%..ocl.OclSelf" name=">=" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclComparableGreaterThanEqualOperation" precedence="Z.RELATIONAL">
        <ownedComment body="True if oclText[self] is greater than or equal to oclText[that].&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OclComparable.%62%%61%..ocl.OclSelf" name="that" type="OclSelf"/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:Class" xmi:id="T.ocl.OclElement" name="OclElement" superClass="T.ocl.OclAny">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>OCL</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="The type OclElement is the implicit supertype of any user-defined type that has no explicit supertypes. Operations defined&#xA;for OclElement are therefore applicable to all user-defined types.&#xA;"/>
      <ownedOperation xmi:id="o.ocl.OclElement.allInstances" isStatic="true" name="allInstances" type="//@nestedPackage.1/@ownedType.145" implementationClass="org.eclipse.ocl.examples.library.classifier.ClassifierAllInstancesOperation">
        <ownedComment body="Return a set of all instances of the type and derived types of self."/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclElement.oclContainer" name="oclContainer" isRequired="false" type="T.ocl.OclElement" implementationClass="org.eclipse.ocl.examples.library.classifier.ClassifierOclContainerOperation">
        <ownedComment body="Returns the object for which self is a composed content or null if there is no such object."/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclElement.oclContents" name="oclContents" type="//@nestedPackage.1/@ownedType.144" implementationClass="org.eclipse.ocl.examples.library.classifier.ClassifierOclContentsOperation">
        <ownedComment body="Returns the composed contents of self."/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:InvalidType" xmi:id="T.ocl.OclInvalid" name="OclInvalid" superClass="T.ocl.OclVoid">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>OCL</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="The type OclInvalid is a type that conforms to all other types.&#xA;It has one single instance, identified as  oclText[invalid].&#xA;Any property call applied on invalid results in oclText[invalid], except for the operations oclIsUndefined() and oclIsInvalid().&#xA;OclInvalid is itself an instance of the metatype InvalidType.&#xA;"/>
      <ownedOperation xmi:id="o.ocl.OclInvalid.allInstances" isStatic="true" name="allInstances" type="//@nestedPackage.1/@ownedType.145" implementationClass="org.eclipse.ocl.examples.library.oclinvalid.OclInvalidAllInstancesOperation">
        <ownedComment body="Returns oclText[invalid]."/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclInvalid.%61%..ocl.OclSelf" name="=" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyEqualOperation" precedence="Z.EQUALITY">
        <ownedComment body="Returns oclText[invalid]."/>
        <ownedParameter xmi:id="p0o.ocl.OclInvalid.%61%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclInvalid.%60%%62%..ocl.OclSelf" name="&lt;>" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyNotEqualOperation" precedence="Z.EQUALITY">
        <ownedComment body="Returns oclText[invalid]."/>
        <ownedParameter xmi:id="p0o.ocl.OclInvalid.%60%%62%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclInvalid.and..ocl.Boolean" name="and" isRequired="false" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.logical.BooleanAndOperation" isValidating="true" precedence="Z.AND">
        <ownedParameter xmi:id="p0o.ocl.OclInvalid.and..ocl.Boolean" name="b" isRequired="false" type="Boolean"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclInvalid.implies..ocl.Boolean" name="implies" isRequired="false" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.logical.BooleanImpliesOperation" isValidating="true" precedence="Z.IMPLIES">
        <ownedParameter xmi:id="p0o.ocl.OclInvalid.implies..ocl.Boolean" name="b" isRequired="false" type="Boolean"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclInvalid.or..ocl.Boolean" name="or" isRequired="false" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.logical.BooleanAndOperation" isValidating="true" precedence="Z.OR">
        <ownedParameter xmi:id="p0o.ocl.OclInvalid.or..ocl.Boolean" name="b" isRequired="false" type="Boolean"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclInvalid.oclAsSet" name="oclAsSet" type="//@nestedPackage.1/@ownedType.145" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyOclAsSetOperation"/>
      <ownedOperation xmi:id="o.ocl.OclInvalid.oclAsType..$$.Metaclass" name="oclAsType" type="T.ocl.OclInvalid..oclAsTypeTT" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyOclAsTypeOperation">
        <ownedTemplateSignature xmi:id="s.o.ocl.OclInvalid.oclAsType..$$.Metaclass">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.OclInvalid..oclAsTypeTT" parameteredElement="T.ocl.OclInvalid..oclAsTypeTT">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.OclInvalid..oclAsTypeTT" name="TT" templateParameter="t.ocl.OclInvalid..oclAsTypeTT"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0o.ocl.OclInvalid.oclAsType..$$.Metaclass" name="type" type="//@nestedPackage.1/@ownedType.91"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclInvalid.oclIsInvalid" name="oclIsInvalid" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyOclIsInvalidOperation" isValidating="true"/>
      <ownedOperation xmi:id="o.ocl.OclInvalid.oclIsKindOf..$$.Metaclass" name="oclIsKindOf" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyOclIsKindOfOperation">
        <ownedTemplateSignature xmi:id="s.o.ocl.OclInvalid.oclIsKindOf..$$.Metaclass">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.OclInvalid..oclIsKindOfT" parameteredElement="T.ocl.OclInvalid..oclIsKindOfT">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.OclInvalid..oclIsKindOfT" name="T" templateParameter="t.ocl.OclInvalid..oclIsKindOfT"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0o.ocl.OclInvalid.oclIsKindOf..$$.Metaclass" name="type" type="//@nestedPackage.1/@ownedType.92"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclInvalid.oclIsTypeOf..$$.Metaclass" name="oclIsTypeOf" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyOclIsTypeOfOperation">
        <ownedTemplateSignature xmi:id="s.o.ocl.OclInvalid.oclIsTypeOf..$$.Metaclass">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.OclInvalid..oclIsTypeOfT" parameteredElement="T.ocl.OclInvalid..oclIsTypeOfT">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.OclInvalid..oclIsTypeOfT" name="T" templateParameter="t.ocl.OclInvalid..oclIsTypeOfT"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0o.ocl.OclInvalid.oclIsTypeOf..$$.Metaclass" name="type" type="//@nestedPackage.1/@ownedType.93"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclInvalid.oclIsUndefined" name="oclIsUndefined" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyOclIsUndefinedOperation" isValidating="true"/>
      <ownedOperation xmi:id="o.ocl.OclInvalid.oclType" name="oclType" type="//@nestedPackage.1/@ownedType.95" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyOclTypeOperation"/>
      <ownedOperation xmi:id="o.ocl.OclInvalid.toString" name="toString" type="String" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyToStringOperation">
        <ownedComment body="Returns 'invalid'."/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:Class" xmi:id="T.ocl.OclLambda" name="OclLambda" superClass="T.ocl.OclAny">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>OCL</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="The type OclLambda is the implicit supertype of all Lambda types. The operations defined for OclLambda&#xA;therefore apply to all lambda expressions.&#xA;"/>
    </ownedType>
    <ownedType xsi:type="pivot:Class" xmi:id="T.ocl.OclMessage" name="OclMessage" superClass="T.ocl.OclAny">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>UML</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="OclMessage&#xA;This sub clause contains the definition of the standard type OclMessage.&#xA;As defined in this sub clause, each ocl message type is actually a template type with one parameter.&#xA;‘T’ denotes the parameter.&#xA;A concrete ocl message type is created by substituting an operation or signal for the T.&#xA;&#xA;The predefined type OclMessage is an instance of MessageType.&#xA;Every OclMessage is fully determined by either the operation, or signal given as parameter.&#xA;Note that there is conceptually an undefined (infinite) number of these types,&#xA;as each is determined by a different operation or signal.&#xA;These types are unnamed. Every type has as attributes the name of the operation or signal,&#xA;and either all formal parameters of the operation, or all attributes of the signal.&#xA;OclMessage is itself an instance of the metatype MessageType.&#xA;&#xA;OclMessage has a number of predefined operations, as shown in the OCL Standard Library.&#xA;"/>
      <ownedOperation xmi:id="o.ocl.OclMessage.hasReturned" name="hasReturned" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyUnsupportedOperation">
        <ownedComment body="True if type of template parameter is an operation call, and the called operation has returned a value.&#xA;This implies the fact that the message has been sent. False in all other cases.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclMessage.result" name="result" type="T.ocl.OclAny" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyUnsupportedOperation">
        <ownedComment body="Returns the result of the called operation, if type of template parameter is an operation call,&#xA;and the called operation has returned a value. Otherwise the oclText[invalid] value is returned.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclMessage.isOperationCall" name="isOperationCall" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyUnsupportedOperation">
        <ownedComment body="Returns oclText[true] if the OclMessage represents the sending of a UML Operation call.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclMessage.isSignalSent" name="isSignalSent" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyUnsupportedOperation">
        <ownedComment body="Returns oclText[true] if the OclMessage represents the sending of a UML Signal.&#xA;"/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:SelfType" xmi:id="OclSelf" name="OclSelf" superClass="T.ocl.OclAny">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>OCL</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="The pseudo-type OclSelf denotes the statically determinate type of oclText[self] in Operation&#xA;and Iteration signatures. Instances of OclSelf are never created.&#xA;"/>
    </ownedType>
    <ownedType xsi:type="pivot:Class" xmi:id="T.ocl.OclState" name="OclState" superClass="T.ocl.OclAny">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>UML</value>
        </ownedDetail>
      </ownedAnnotation>
    </ownedType>
    <ownedType xsi:type="pivot:Class" xmi:id="T.ocl.OclSummable" name="OclSummable" superClass="T.ocl.OclAny">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>OCL</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="The type OclSummable defines the sum and zero operations used by the Collection::sum iteration. Only types that provide derived&#xA;sum and zero implementations may be summed."/>
      <ownedOperation xmi:id="o.ocl.OclSummable.sum..ocl.OclSelf" name="sum" type="OclSelf">
        <ownedComment body="Return the sum of self and that.&#xA;&#xA;The sum operation should be associative."/>
        <ownedParameter xmi:id="p0o.ocl.OclSummable.sum..ocl.OclSelf" name="that" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclSummable.zero" name="zero" type="OclSelf">
        <ownedComment body="Return the 'zero' value of self to initialize a summation.&#xA;&#xA;zero().sum(self) = self."/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:Class" xmi:id="T.ocl.OclTuple" name="OclTuple" superClass="T.ocl.OclAny">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>OCL</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="The type OclTuple is the implicit supertype of all Tuple types. The operations defined for OclTuple&#xA;therefore apply to all tuples.&#xA;"/>
      <ownedOperation xmi:id="o.ocl.OclTuple.%61%..ocl.OclSelf" name="=" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyEqualOperation" precedence="Z.EQUALITY">
        <ownedParameter xmi:id="p0o.ocl.OclTuple.%61%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclTuple.%60%%62%..ocl.OclSelf" name="&lt;>" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyNotEqualOperation" precedence="Z.EQUALITY">
        <ownedParameter xmi:id="p0o.ocl.OclTuple.%60%%62%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:Class" xmi:id="T.ocl.OclType" name="OclType" superClass="T.ocl.OclElement">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>OCL</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="The type OclType is the implicit supertype of any UML type. Operations defined&#xA;for OclType are therefore applicable to all UML types.&#xA;"/>
      <ownedOperation xmi:id="o.ocl.OclType.conformsTo..ocl.OclType" name="conformsTo" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.classifier.OclTypeConformsToOperation">
        <ownedComment body="Returns true if type2 conforms to self."/>
        <ownedParameter xmi:id="p0o.ocl.OclType.conformsTo..ocl.OclType" name="type2" type="T.ocl.OclType"/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:VoidType" xmi:id="T.ocl.OclVoid" name="OclVoid" superClass="T.ocl.OclAny">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>OCL</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="The type OclVoid is a type that conforms to all other types except OclInvalid.&#xA;It has one single instance, identified as oclText[null], that corresponds with the UML LiteralNull value specification.&#xA;Any property call applied on oclText[null] results in oclText[invalid], except for the&#xA;oclIsUndefined(), oclIsInvalid(), =(OclAny) and &lt;>(OclAny) operations.&#xA;However, by virtue of the implicit conversion to a collection literal,&#xA;an expression evaluating to oclText[null] can be used as source of collection operations (such as ‘isEmpty’).&#xA;If the source is the oclText[null] literal, it is implicitly converted to Bag{}.&#xA;&#xA;OclVoid is itself an instance of the metatype VoidType.&#xA;"/>
      <ownedOperation xmi:id="o.ocl.OclVoid.allInstances" isStatic="true" name="allInstances" type="//@nestedPackage.1/@ownedType.145" implementationClass="org.eclipse.ocl.examples.library.oclvoid.OclVoidAllInstancesOperation">
        <ownedComment body="Returns oclText[Set{null}]."/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclVoid.%61%..ocl.OclSelf" name="=" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyEqualOperation" precedence="Z.EQUALITY">
        <ownedComment body="Redefines the OclAny operation, returning oclText[true] if object is oclText[null], oclText[invalid]&#xA;if object is oclText[invalid], oclText[false] otherwise.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OclVoid.%61%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclVoid.%60%%62%..ocl.OclSelf" name="&lt;>" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyNotEqualOperation" precedence="Z.EQUALITY">
        <ownedParameter xmi:id="p0o.ocl.OclVoid.%60%%62%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclVoid.and..ocl.Boolean" name="and" isRequired="false" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclvoid.OclVoidAndOperation" precedence="Z.AND">
        <ownedParameter xmi:id="p0o.ocl.OclVoid.and..ocl.Boolean" name="b" isRequired="false" type="Boolean"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclVoid.implies..ocl.Boolean" name="implies" isRequired="false" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclvoid.OclVoidImpliesOperation" precedence="Z.IMPLIES">
        <ownedParameter xmi:id="p0o.ocl.OclVoid.implies..ocl.Boolean" name="b" isRequired="false" type="Boolean"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclVoid.or..ocl.Boolean" name="or" isRequired="false" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclvoid.OclVoidOrOperation" precedence="Z.OR">
        <ownedParameter xmi:id="p0o.ocl.OclVoid.or..ocl.Boolean" name="b" isRequired="false" type="Boolean"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OclVoid.oclIsInvalid" name="oclIsInvalid" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyOclIsInvalidOperation" isValidating="true"/>
      <ownedOperation xmi:id="o.ocl.OclVoid.oclIsUndefined" name="oclIsUndefined" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyOclIsUndefinedOperation" isValidating="true"/>
      <ownedOperation xmi:id="o.ocl.OclVoid.toString" name="toString" type="String" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyToStringOperation">
        <ownedComment body="Returns oclText[null]."/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" xmi:id="OrderedCollection" name="OrderedCollection" superClass="//@nestedPackage.1/@ownedType.63" elementType="T.ocl..OrderedCollectionT">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>Collection</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="The OrderedCollection type provides the shared functionality of the OrderedSet and Sequence&#xA;collections for which the elements are ordered.&#xA;The common supertype of OrderedCollection is Collection.&#xA;"/>
      <ownedTemplateSignature xmi:id="s.OrderedCollection">
        <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl..OrderedCollectionT" parameteredElement="T.ocl..OrderedCollectionT">
          <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl..OrderedCollectionT" name="T" templateParameter="t.ocl..OrderedCollectionT"/>
        </ownedParameter>
      </ownedTemplateSignature>
      <ownedOperation xmi:id="o.ocl.OrderedCollection.at..ocl.Integer" name="at" isRequired="false" type="T.ocl..OrderedCollectionT" implementationClass="org.eclipse.ocl.examples.library.collection.OrderedCollectionAtOperation" isInvalidating="true">
        <ownedComment body="The i-th element of ordered collection.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OrderedCollection.at..ocl.Integer" name="index" type="Integer"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OrderedCollection.first" name="first" isRequired="false" type="T.ocl..OrderedCollectionT" implementationClass="org.eclipse.ocl.examples.library.collection.OrderedCollectionFirstOperation" isInvalidating="true">
        <ownedComment body="The first element in oclText[self].&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OrderedCollection.indexOf..ocl.OclAny" name="indexOf" type="Integer" implementationClass="org.eclipse.ocl.examples.library.collection.OrderedCollectionIndexOfOperation">
        <ownedComment body="The index of object obj in the ordered collection.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OrderedCollection.indexOf..ocl.OclAny" name="obj" isRequired="false" type="T.ocl.OclAny"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OrderedCollection.last" name="last" isRequired="false" type="T.ocl..OrderedCollectionT" implementationClass="org.eclipse.ocl.examples.library.collection.OrderedCollectionLastOperation" isInvalidating="true">
        <ownedComment body="The last element in oclText[self].&#xA;"/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:OrderedSetType" xmi:id="OrderedSet" name="OrderedSet" superClass="//@nestedPackage.1/@ownedType.113 //@nestedPackage.1/@ownedType.160" elementType="T.ocl..OrderedSetT">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>Collection</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="The OrderedSet is a Set, the elements of which are ordered.&#xA;It contains no duplicates. OrderedSet is itself an instance of the metatype OrderedSetType.&#xA;An OrderedSet is not a subtype of Set, neither a subtype of Sequence.&#xA;The common supertype of Sets and OrderedSets is Collection.&#xA;"/>
      <ownedTemplateSignature xmi:id="s.OrderedSet">
        <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl..OrderedSetT" parameteredElement="T.ocl..OrderedSetT">
          <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl..OrderedSetT" name="T" templateParameter="t.ocl..OrderedSetT"/>
        </ownedParameter>
      </ownedTemplateSignature>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.OrderedSet.closure..T" name="closure" type="OrderedSet" implementationClass="org.eclipse.ocl.examples.library.iterator.ClosureIteration">
        <ownedComment body="The closure of applying body transitively to every distinct element of the source collection.&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.OrderedSet.closure..T" name="lambda" type="//@nestedPackage.1/@ownedType.12"/>
        <ownedIterator xmi:id="i0i.ocl.OrderedSet.closure..T" name="i" type="T.ocl..OrderedSetT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.OrderedSet.collect..T" name="collect" type="//@nestedPackage.1/@ownedType.135" implementationClass="org.eclipse.ocl.examples.library.iterator.CollectIteration">
        <ownedTemplateSignature xmi:id="s.i.ocl.OrderedSet.collect..T">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.OrderedSet..collectV" parameteredElement="T.ocl.OrderedSet..collectV">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.OrderedSet..collectV" name="V" templateParameter="t.ocl.OrderedSet..collectV"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0i.ocl.OrderedSet.collect..T" name="lambda" isRequired="false" type="//@nestedPackage.1/@ownedType.14"/>
        <ownedIterator xmi:id="i0i.ocl.OrderedSet.collect..T" name="i" isRequired="false" type="T.ocl..OrderedSetT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.OrderedSet.collectNested..T" name="collectNested" type="//@nestedPackage.1/@ownedType.134" implementationClass="org.eclipse.ocl.examples.library.iterator.CollectNestedIteration">
        <ownedComment body="The sequence of elements that results from applying body to every member of the source ordered collection.&#xA;"/>
        <ownedTemplateSignature xmi:id="s.i.ocl.OrderedSet.collectNested..T">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.OrderedSet..collectNestedV" parameteredElement="T.ocl.OrderedSet..collectNestedV">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.OrderedSet..collectNestedV" name="V" templateParameter="t.ocl.OrderedSet..collectNestedV"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0i.ocl.OrderedSet.collectNested..T" name="lambda" isRequired="false" type="//@nestedPackage.1/@ownedType.13"/>
        <ownedIterator xmi:id="i0i.ocl.OrderedSet.collectNested..T" name="i" isRequired="false" type="T.ocl..OrderedSetT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.OrderedSet.reject..T" name="reject" type="OrderedSet" implementationClass="org.eclipse.ocl.examples.library.iterator.RejectIteration">
        <ownedComment body="The ordered set of the source ordered set for which body is oclText[false].&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.OrderedSet.reject..T" name="lambda" type="//@nestedPackage.1/@ownedType.10"/>
        <ownedIterator xmi:id="i0i.ocl.OrderedSet.reject..T" name="i" isRequired="false" type="T.ocl..OrderedSetT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.OrderedSet.select..T" name="select" type="OrderedSet" implementationClass="org.eclipse.ocl.examples.library.iterator.SelectIteration">
        <ownedComment body="The ordered set of the source ordered set for which body is oclText[true]&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.OrderedSet.select..T" name="lambda" type="//@nestedPackage.1/@ownedType.10"/>
        <ownedIterator xmi:id="i0i.ocl.OrderedSet.select..T" name="i" isRequired="false" type="T.ocl..OrderedSetT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.OrderedSet.sortedBy..T" name="sortedBy" type="OrderedSet" implementationClass="org.eclipse.ocl.examples.library.iterator.SortedByIteration">
        <ownedComment body="Results in the ordered set containing all elements of the source collection.&#xA;The element for which body has the lowest value comes first, and so on.&#xA;The type of the body expression must have the &lt; operation defined.&#xA;The &lt; operation must return a Boolean value and must be transitive (i.e., if a &lt; b and b &lt; c, then a &lt; c).&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.OrderedSet.sortedBy..T" name="lambda" type="//@nestedPackage.1/@ownedType.11"/>
        <ownedIterator xmi:id="i0i.ocl.OrderedSet.sortedBy..T" name="i" isRequired="false" type="T.ocl..OrderedSetT"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OrderedSet.%61%..ocl.OclSelf" name="=" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyEqualOperation" precedence="Z.EQUALITY">
        <ownedParameter xmi:id="p0o.ocl.OrderedSet.%61%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OrderedSet.%60%%62%..ocl.OclSelf" name="&lt;>" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyNotEqualOperation" precedence="Z.EQUALITY">
        <ownedParameter xmi:id="p0o.ocl.OrderedSet.%60%%62%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OrderedSet.%45%..$$.UniqueCollection" name="-" type="OrderedSet" implementationClass="org.eclipse.ocl.examples.library.collection.SetMinusOperation" precedence="Z.ADDITIVE">
        <ownedComment body="The elements of oclText[self], which are not in s.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OrderedSet.%45%..$$.UniqueCollection" name="s" type="//@nestedPackage.1/@ownedType.154"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OrderedSet.append..T" name="append" type="OrderedSet" implementationClass="org.eclipse.ocl.examples.library.collection.OrderedCollectionAppendOperation">
        <ownedComment body="The set of elements, consisting of all elements of oclText[self], followed by object.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OrderedSet.append..T" name="object" isRequired="false" type="T.ocl..OrderedSetT"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OrderedSet.appendAll..$$.OrderedCollection" name="appendAll" type="OrderedSet" implementationClass="org.eclipse.ocl.examples.library.collection.OrderedCollectionAppendAllOperation">
        <ownedComment body="The set of elements, consisting of all elements of oclText[self], followed by objects.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OrderedSet.appendAll..$$.OrderedCollection" name="objects" type="//@nestedPackage.1/@ownedType.113"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OrderedSet.excluding..ocl.OclAny" name="excluding" type="OrderedSet" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionExcludingOperation">
        <ownedComment body="The ordered set  containing all elements of oclText[self] apart from object.&#xA;&#xA;The order of the remaining elements is not changed.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OrderedSet.excluding..ocl.OclAny" name="object" isRequired="false" type="T.ocl.OclAny"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OrderedSet.excludingAll..$$.Collection" name="excludingAll" type="OrderedSet" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionExcludingAllOperation">
        <ownedComment body="The ordered set containing all elements of oclText[self] apart from all occurrences of all objects.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OrderedSet.excludingAll..$$.Collection" name="objects" type="//@nestedPackage.1/@ownedType.60"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OrderedSet.flatten" name="flatten" type="//@nestedPackage.1/@ownedType.124" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionFlattenOperation">
        <ownedTemplateSignature xmi:id="s.o.ocl.OrderedSet.flatten">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.OrderedSet..flattenT2" parameteredElement="T.ocl.OrderedSet..flattenT2">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.OrderedSet..flattenT2" name="T2" templateParameter="t.ocl.OrderedSet..flattenT2"/>
          </ownedParameter>
        </ownedTemplateSignature>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OrderedSet.including..T" name="including" type="OrderedSet" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionIncludingOperation">
        <ownedComment body="The ordered set containing all elements of oclText[self] plus object added as the last element if not already present.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OrderedSet.including..T" name="object" isRequired="false" type="T.ocl..OrderedSetT"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OrderedSet.insertAt..ocl.Integer..T" name="insertAt" type="OrderedSet" implementationClass="org.eclipse.ocl.examples.library.collection.OrderedCollectionInsertAtOperation" isInvalidating="true">
        <ownedComment body="The ordered set consisting of oclText[self] with object present at position index.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OrderedSet.insertAt..ocl.Integer..T" name="index" type="Integer"/>
        <ownedParameter xmi:id="p1o.ocl.OrderedSet.insertAt..ocl.Integer..T" name="object" isRequired="false" type="T.ocl..OrderedSetT"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OrderedSet.prepend..T" name="prepend" type="OrderedSet" implementationClass="org.eclipse.ocl.examples.library.collection.OrderedCollectionPrependOperation">
        <ownedComment body="The sequence consisting of object, followed by all elements in oclText[self].&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OrderedSet.prepend..T" name="object" isRequired="false" type="T.ocl..OrderedSetT"/>
        <postcondition xmi:id="c+ocl.OrderedSet.prepend.IsSizePlusOne" name="IsSizePlusOne">
          <specification xsi:type="pivot:ExpressionInOCL" type="Boolean">
            <body>result->size() = self->size() + 1</body>
            <language>OCL</language>
            <bodyExpression xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.Real.%61%..ocl.OclSelf">
              <source xsi:type="pivot:OperationCallExp" type="Integer" referredOperation="o.ocl.Collection.size">
                <source xsi:type="pivot:VariableExp" type="OrderedSet" referredVariable="//@nestedPackage.0/@ownedType.24/@ownedOperation.16/@postcondition.0/@specification/@resultVariable"/>
              </source>
              <argument xsi:type="pivot:OperationCallExp" name="+" type="Integer" referredOperation="o.ocl.Integer.%43%..ocl.OclSelf">
                <source xsi:type="pivot:OperationCallExp" type="Integer" referredOperation="o.ocl.Collection.size">
                  <source xsi:type="pivot:VariableExp" type="OrderedSet" referredVariable="//@nestedPackage.0/@ownedType.24/@ownedOperation.16/@postcondition.0/@specification/@contextVariable"/>
                </source>
                <argument xsi:type="pivot:UnlimitedNaturalLiteralExp" type="UnlimitedNatural" unlimitedNaturalSymbol="1"/>
              </argument>
            </bodyExpression>
            <contextVariable name="self" type="OrderedSet"/>
            <parameterVariable name="object" type="T.ocl..OrderedSetT" representedParameter="p0o.ocl.OrderedSet.prepend..T"/>
            <resultVariable name="result" type="OrderedSet"/>
          </specification>
        </postcondition>
        <postcondition xmi:id="c+ocl.OrderedSet.prepend.IsAtStart" name="IsAtStart">
          <specification xsi:type="pivot:ExpressionInOCL" type="Boolean">
            <body>result->at(1) = object</body>
            <language>OCL</language>
            <bodyExpression xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.OclAny.%61%..ocl.OclSelf">
              <source xsi:type="pivot:OperationCallExp" isRequired="false" type="T.ocl..OrderedSetT" referredOperation="o.ocl.OrderedCollection.at..ocl.Integer">
                <source xsi:type="pivot:VariableExp" type="OrderedSet" referredVariable="//@nestedPackage.0/@ownedType.24/@ownedOperation.16/@postcondition.1/@specification/@resultVariable"/>
                <argument xsi:type="pivot:UnlimitedNaturalLiteralExp" type="UnlimitedNatural" unlimitedNaturalSymbol="1"/>
              </source>
              <argument xsi:type="pivot:VariableExp" type="T.ocl..OrderedSetT" referredVariable="//@nestedPackage.0/@ownedType.24/@ownedOperation.16/@postcondition.1/@specification/@parameterVariable.0"/>
            </bodyExpression>
            <contextVariable name="self" type="OrderedSet"/>
            <parameterVariable name="object" type="T.ocl..OrderedSetT" representedParameter="p0o.ocl.OrderedSet.prepend..T"/>
            <resultVariable name="result" type="OrderedSet"/>
          </specification>
        </postcondition>
        <postcondition xmi:id="c+ocl.OrderedSet.prepend.IsShiftedAlong" name="IsShiftedAlong">
          <specification xsi:type="pivot:ExpressionInOCL" isRequired="false" type="Boolean">
            <body>Sequence{1..self->size()}->forAll(index : Integer | self->at(index) = result->at(index + 1))</body>
            <language>OCL</language>
            <bodyExpression xsi:type="pivot:IteratorExp" isRequired="false" type="Boolean" referredIteration="i.ocl.Collection.forAll..T">
              <source xsi:type="pivot:CollectionLiteralExp" type="//@nestedPackage.1/@ownedType.130" kind="Sequence">
                <part xsi:type="pivot:CollectionRange" type="Integer">
                  <first xsi:type="pivot:UnlimitedNaturalLiteralExp" type="UnlimitedNatural" unlimitedNaturalSymbol="1"/>
                  <last xsi:type="pivot:OperationCallExp" type="Integer" referredOperation="o.ocl.Collection.size">
                    <source xsi:type="pivot:VariableExp" type="OrderedSet" referredVariable="//@nestedPackage.0/@ownedType.24/@ownedOperation.16/@postcondition.2/@specification/@contextVariable"/>
                  </last>
                </part>
              </source>
              <body xsi:type="pivot:OperationCallExp" name="=" type="Boolean" referredOperation="o.ocl.OclAny.%61%..ocl.OclSelf">
                <source xsi:type="pivot:OperationCallExp" isRequired="false" type="T.ocl..OrderedSetT" referredOperation="o.ocl.OrderedCollection.at..ocl.Integer">
                  <source xsi:type="pivot:VariableExp" type="OrderedSet" referredVariable="//@nestedPackage.0/@ownedType.24/@ownedOperation.16/@postcondition.2/@specification/@contextVariable"/>
                  <argument xsi:type="pivot:VariableExp" isRequired="false" type="Integer" referredVariable="//@nestedPackage.0/@ownedType.24/@ownedOperation.16/@postcondition.2/@specification/@bodyExpression/@iterator.0"/>
                </source>
                <argument xsi:type="pivot:OperationCallExp" isRequired="false" type="T.ocl..OrderedSetT" referredOperation="o.ocl.OrderedCollection.at..ocl.Integer">
                  <source xsi:type="pivot:VariableExp" type="OrderedSet" referredVariable="//@nestedPackage.0/@ownedType.24/@ownedOperation.16/@postcondition.2/@specification/@resultVariable"/>
                  <argument xsi:type="pivot:OperationCallExp" name="+" type="Integer" referredOperation="o.ocl.Integer.%43%..ocl.OclSelf">
                    <source xsi:type="pivot:VariableExp" isRequired="false" type="Integer" referredVariable="//@nestedPackage.0/@ownedType.24/@ownedOperation.16/@postcondition.2/@specification/@bodyExpression/@iterator.0"/>
                    <argument xsi:type="pivot:UnlimitedNaturalLiteralExp" type="UnlimitedNatural" unlimitedNaturalSymbol="1"/>
                  </argument>
                </argument>
              </body>
              <iterator name="index" isRequired="false" type="Integer" representedParameter="i0i.ocl.Collection.forAll..T"/>
            </bodyExpression>
            <contextVariable name="self" type="OrderedSet"/>
            <parameterVariable name="object" type="T.ocl..OrderedSetT" representedParameter="p0o.ocl.OrderedSet.prepend..T"/>
            <resultVariable name="result" type="OrderedSet"/>
          </specification>
        </postcondition>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OrderedSet.prependAll..$$.OrderedCollection" name="prependAll" type="OrderedSet" implementationClass="org.eclipse.ocl.examples.library.collection.OrderedCollectionPrependAllOperation">
        <ownedComment body="The sequence consisting of objects, followed by all elements in oclText[self].&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OrderedSet.prependAll..$$.OrderedCollection" name="objects" type="//@nestedPackage.1/@ownedType.113"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OrderedSet.reverse" name="reverse" type="OrderedSet" implementationClass="org.eclipse.ocl.examples.library.collection.OrderedCollectionReverseOperation">
        <ownedComment body="The ordered set of elements with same elements but with the opposite order.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OrderedSet.selectByKind..$$.Metaclass" name="selectByKind" type="//@nestedPackage.1/@ownedType.125" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionSelectByKindOperation">
        <ownedTemplateSignature xmi:id="s.o.ocl.OrderedSet.selectByKind..$$.Metaclass">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.OrderedSet..selectByKindTT" parameteredElement="T.ocl.OrderedSet..selectByKindTT">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.OrderedSet..selectByKindTT" name="TT" templateParameter="t.ocl.OrderedSet..selectByKindTT"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0o.ocl.OrderedSet.selectByKind..$$.Metaclass" name="type" type="//@nestedPackage.1/@ownedType.97"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OrderedSet.selectByType..$$.Metaclass" name="selectByType" type="//@nestedPackage.1/@ownedType.126" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionSelectByTypeOperation">
        <ownedTemplateSignature xmi:id="s.o.ocl.OrderedSet.selectByType..$$.Metaclass">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.OrderedSet..selectByTypeTT" parameteredElement="T.ocl.OrderedSet..selectByTypeTT">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.OrderedSet..selectByTypeTT" name="TT" templateParameter="t.ocl.OrderedSet..selectByTypeTT"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0o.ocl.OrderedSet.selectByType..$$.Metaclass" name="type" type="//@nestedPackage.1/@ownedType.98"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.OrderedSet.subOrderedSet..ocl.Integer..ocl.Integer" name="subOrderedSet" type="OrderedSet" implementationClass="org.eclipse.ocl.examples.library.collection.OrderedSetSubOrderedSetOperation" isInvalidating="true">
        <ownedComment body="The sub-set of oclText[self] starting at number lower, up to and including element number upper.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.OrderedSet.subOrderedSet..ocl.Integer..ocl.Integer" name="lower" type="Integer"/>
        <ownedParameter xmi:id="p1o.ocl.OrderedSet.subOrderedSet..ocl.Integer..ocl.Integer" name="upper" type="Integer"/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:SequenceType" xmi:id="Sequence" name="Sequence" superClass="//@nestedPackage.1/@ownedType.119" elementType="T.ocl..SequenceT">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>Collection</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="A sequence is a collection where the elements are ordered.&#xA;An element may be part of a sequence more than once.&#xA;Sequence is itself an instance of the metatype SequenceType.&#xA;A Sentence is not a subtype of Bag.&#xA;The common supertype of Sentence and Bags is Collection.&#xA;"/>
      <ownedTemplateSignature xmi:id="s.Sequence">
        <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl..SequenceT" parameteredElement="T.ocl..SequenceT">
          <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl..SequenceT" name="T" templateParameter="t.ocl..SequenceT"/>
        </ownedParameter>
      </ownedTemplateSignature>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Sequence.closure..T" name="closure" type="//@nestedPackage.1/@ownedType.127" implementationClass="org.eclipse.ocl.examples.library.iterator.ClosureIteration">
        <ownedComment body="The closure of applying body transitively to every distinct element of the source collection.&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.Sequence.closure..T" name="lambda" type="//@nestedPackage.1/@ownedType.17"/>
        <ownedIterator xmi:id="i0i.ocl.Sequence.closure..T" name="i" type="T.ocl..SequenceT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Sequence.collect..T" name="collect" type="//@nestedPackage.1/@ownedType.137" implementationClass="org.eclipse.ocl.examples.library.iterator.CollectIteration">
        <ownedTemplateSignature xmi:id="s.i.ocl.Sequence.collect..T">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Sequence..collectV" parameteredElement="T.ocl.Sequence..collectV">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Sequence..collectV" name="V" templateParameter="t.ocl.Sequence..collectV"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0i.ocl.Sequence.collect..T" name="lambda" isRequired="false" type="//@nestedPackage.1/@ownedType.19"/>
        <ownedIterator xmi:id="i0i.ocl.Sequence.collect..T" name="i" isRequired="false" type="T.ocl..SequenceT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Sequence.collectNested..T" name="collectNested" type="//@nestedPackage.1/@ownedType.136" implementationClass="org.eclipse.ocl.examples.library.iterator.CollectNestedIteration">
        <ownedComment body="The sequence of elements that results from applying body to every member of the source ordered collection.&#xA;"/>
        <ownedTemplateSignature xmi:id="s.i.ocl.Sequence.collectNested..T">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Sequence..collectNestedV" parameteredElement="T.ocl.Sequence..collectNestedV">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Sequence..collectNestedV" name="V" templateParameter="t.ocl.Sequence..collectNestedV"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0i.ocl.Sequence.collectNested..T" name="lambda" isRequired="false" type="//@nestedPackage.1/@ownedType.18"/>
        <ownedIterator xmi:id="i0i.ocl.Sequence.collectNested..T" name="i" isRequired="false" type="T.ocl..SequenceT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Sequence.reject..T" name="reject" type="Sequence" implementationClass="org.eclipse.ocl.examples.library.iterator.RejectIteration">
        <ownedComment body="The subsequence of the source sequence for which body is oclText[false].&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.Sequence.reject..T" name="lambda" type="//@nestedPackage.1/@ownedType.15"/>
        <ownedIterator xmi:id="i0i.ocl.Sequence.reject..T" name="i" isRequired="false" type="T.ocl..SequenceT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Sequence.select..T" name="select" type="Sequence" implementationClass="org.eclipse.ocl.examples.library.iterator.SelectIteration">
        <ownedComment body="The subsequence of the source sequence for which body is oclText[true].&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.Sequence.select..T" name="lambda" type="//@nestedPackage.1/@ownedType.15"/>
        <ownedIterator xmi:id="i0i.ocl.Sequence.select..T" name="i" isRequired="false" type="T.ocl..SequenceT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Sequence.sortedBy..T" name="sortedBy" type="Sequence" implementationClass="org.eclipse.ocl.examples.library.iterator.SortedByIteration">
        <ownedComment body="Results in the Sequence containing all elements of the source collection.&#xA;The element for which body has the lowest value comes first, and so on.&#xA;The type of the body expression must have the &lt; operation defined.&#xA;The &lt; operation must return a Boolean value and must be transitive (i.e., if a &lt; b and b &lt; c then a &lt; c).&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.Sequence.sortedBy..T" name="lambda" type="//@nestedPackage.1/@ownedType.16"/>
        <ownedIterator xmi:id="i0i.ocl.Sequence.sortedBy..T" name="i" isRequired="false" type="T.ocl..SequenceT"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Sequence.%61%..ocl.OclSelf" name="=" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyEqualOperation" precedence="Z.EQUALITY">
        <ownedComment body="True if oclText[self] contains the same elements as s in the same order.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Sequence.%61%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Sequence.%60%%62%..ocl.OclSelf" name="&lt;>" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyNotEqualOperation" precedence="Z.EQUALITY">
        <ownedParameter xmi:id="p0o.ocl.Sequence.%60%%62%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Sequence.append..T" name="append" type="Sequence" implementationClass="org.eclipse.ocl.examples.library.collection.OrderedCollectionAppendOperation">
        <ownedComment body="The sequence of elements, consisting of all elements of oclText[self], followed by object.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Sequence.append..T" name="object" isRequired="false" type="T.ocl..SequenceT"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Sequence.appendAll..$$.OrderedCollection" name="appendAll" type="Sequence" implementationClass="org.eclipse.ocl.examples.library.collection.OrderedCollectionAppendAllOperation">
        <ownedComment body="The sequence of elements, consisting of all elements of oclText[self], followed by objects.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Sequence.appendAll..$$.OrderedCollection" name="objects" type="//@nestedPackage.1/@ownedType.119"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Sequence.excluding..ocl.OclAny" name="excluding" type="Sequence" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionExcludingOperation">
        <ownedComment body="The sequence containing all elements of oclText[self] apart from all occurrences of object.&#xA;&#xA;The order of the remaining elements is not changed.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Sequence.excluding..ocl.OclAny" name="object" isRequired="false" type="T.ocl.OclAny"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Sequence.excludingAll..$$.Collection" name="excludingAll" type="Sequence" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionExcludingAllOperation">
        <ownedComment body="The sequence containing all elements of oclText[self] apart from all occurrences of all objects.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Sequence.excludingAll..$$.Collection" name="objects" type="//@nestedPackage.1/@ownedType.60"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Sequence.flatten" name="flatten" type="//@nestedPackage.1/@ownedType.138" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionFlattenOperation">
        <ownedComment body="Redefines the Collection operation. If the element type is not a collection type, this results in the same sequence as oclText[self].&#xA;If the element type is a collection type, the result is the sequence containing all the elements&#xA;of all the recursively flattened elements of oclText[self]. The order of the elements is partial.&#xA;"/>
        <ownedTemplateSignature xmi:id="s.o.ocl.Sequence.flatten">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Sequence..flattenT2" parameteredElement="T.ocl.Sequence..flattenT2">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Sequence..flattenT2" name="T2" templateParameter="t.ocl.Sequence..flattenT2"/>
          </ownedParameter>
        </ownedTemplateSignature>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Sequence.including..T" name="including" type="Sequence" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionIncludingOperation">
        <ownedComment body="The sequence containing all elements of oclText[self] plus object added as the last element.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Sequence.including..T" name="object" isRequired="false" type="T.ocl..SequenceT"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Sequence.insertAt..ocl.Integer..T" name="insertAt" type="Sequence" implementationClass="org.eclipse.ocl.examples.library.collection.OrderedCollectionInsertAtOperation" isInvalidating="true">
        <ownedComment body="The sequence consisting of oclText[self] with object inserted at position index.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Sequence.insertAt..ocl.Integer..T" name="index" type="Integer"/>
        <ownedParameter xmi:id="p1o.ocl.Sequence.insertAt..ocl.Integer..T" name="object" isRequired="false" type="T.ocl..SequenceT"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Sequence.prepend..T" name="prepend" type="Sequence" implementationClass="org.eclipse.ocl.examples.library.collection.OrderedCollectionPrependOperation">
        <ownedComment body="The sequence consisting of object, followed by all elements in oclText[self].&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Sequence.prepend..T" name="object" isRequired="false" type="T.ocl..SequenceT"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Sequence.prependAll..$$.OrderedCollection" name="prependAll" type="Sequence" implementationClass="org.eclipse.ocl.examples.library.collection.OrderedCollectionPrependAllOperation">
        <ownedComment body="The sequence consisting of objects, followed by all elements in oclText[self].&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Sequence.prependAll..$$.OrderedCollection" name="objects" type="//@nestedPackage.1/@ownedType.119"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Sequence.reverse" name="reverse" type="Sequence" implementationClass="org.eclipse.ocl.examples.library.collection.OrderedCollectionReverseOperation">
        <ownedComment body="The sequence containing the same elements but with the opposite order.&#xA;"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Sequence.selectByKind..$$.Metaclass" name="selectByKind" type="//@nestedPackage.1/@ownedType.139" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionSelectByKindOperation">
        <ownedTemplateSignature xmi:id="s.o.ocl.Sequence.selectByKind..$$.Metaclass">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Sequence..selectByKindTT" parameteredElement="T.ocl.Sequence..selectByKindTT">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Sequence..selectByKindTT" name="TT" templateParameter="t.ocl.Sequence..selectByKindTT"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0o.ocl.Sequence.selectByKind..$$.Metaclass" name="type" type="//@nestedPackage.1/@ownedType.99"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Sequence.selectByType..$$.Metaclass" name="selectByType" type="//@nestedPackage.1/@ownedType.140" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionSelectByTypeOperation">
        <ownedTemplateSignature xmi:id="s.o.ocl.Sequence.selectByType..$$.Metaclass">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Sequence..selectByTypeTT" parameteredElement="T.ocl.Sequence..selectByTypeTT">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Sequence..selectByTypeTT" name="TT" templateParameter="t.ocl.Sequence..selectByTypeTT"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0o.ocl.Sequence.selectByType..$$.Metaclass" name="type" type="//@nestedPackage.1/@ownedType.100"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Sequence.subSequence..ocl.Integer..ocl.Integer" name="subSequence" type="Sequence" implementationClass="org.eclipse.ocl.examples.library.collection.SequenceSubSequenceOperation" isInvalidating="true">
        <ownedComment body="The sub-sequence of oclText[self] starting at number lower, up to and including element number upper.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Sequence.subSequence..ocl.Integer..ocl.Integer" name="lower" type="Integer"/>
        <ownedParameter xmi:id="p1o.ocl.Sequence.subSequence..ocl.Integer..ocl.Integer" name="upper" type="Integer"/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:SetType" xmi:id="Set" name="Set" superClass="//@nestedPackage.1/@ownedType.165" elementType="T.ocl..SetT">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>Collection</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedTemplateSignature xmi:id="s.Set">
        <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl..SetT" parameteredElement="T.ocl..SetT">
          <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl..SetT" name="T" templateParameter="t.ocl..SetT"/>
        </ownedParameter>
      </ownedTemplateSignature>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Set.closure..T" name="closure" type="Set" implementationClass="org.eclipse.ocl.examples.library.iterator.ClosureIteration">
        <ownedComment body="The closure of applying body transitively to every distinct element of the source collection.&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.Set.closure..T" name="lambda" type="//@nestedPackage.1/@ownedType.22"/>
        <ownedIterator xmi:id="i0i.ocl.Set.closure..T" name="i" type="T.ocl..SetT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Set.collect..T" name="collect" type="//@nestedPackage.1/@ownedType.37" implementationClass="org.eclipse.ocl.examples.library.iterator.CollectIteration">
        <ownedTemplateSignature xmi:id="s.i.ocl.Set.collect..T">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Set..collectV" parameteredElement="T.ocl.Set..collectV">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Set..collectV" name="V" templateParameter="t.ocl.Set..collectV"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0i.ocl.Set.collect..T" name="lambda" isRequired="false" type="//@nestedPackage.1/@ownedType.24"/>
        <ownedIterator xmi:id="i0i.ocl.Set.collect..T" name="i" isRequired="false" type="T.ocl..SetT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Set.collectNested..T" name="collectNested" type="//@nestedPackage.1/@ownedType.36" implementationClass="org.eclipse.ocl.examples.library.iterator.CollectNestedIteration">
        <ownedComment body="The Bag of elements which results from applying body to every member of the source nonordered collection.&#xA;"/>
        <ownedTemplateSignature xmi:id="s.i.ocl.Set.collectNested..T">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Set..collectNestedV" parameteredElement="T.ocl.Set..collectNestedV">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Set..collectNestedV" name="V" templateParameter="t.ocl.Set..collectNestedV"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0i.ocl.Set.collectNested..T" name="lambda" isRequired="false" type="//@nestedPackage.1/@ownedType.23"/>
        <ownedIterator xmi:id="i0i.ocl.Set.collectNested..T" name="i" isRequired="false" type="T.ocl..SetT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Set.reject..T" name="reject" type="Set" implementationClass="org.eclipse.ocl.examples.library.iterator.RejectIteration">
        <ownedComment body="The subset of the source set for which body is oclText[false].&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.Set.reject..T" name="lambda" type="//@nestedPackage.1/@ownedType.20"/>
        <ownedIterator xmi:id="i0i.ocl.Set.reject..T" name="i" isRequired="false" type="T.ocl..SetT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Set.select..T" name="select" type="Set" implementationClass="org.eclipse.ocl.examples.library.iterator.SelectIteration">
        <ownedComment body="The subset of set for which expr is oclText[true].&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.Set.select..T" name="lambda" type="//@nestedPackage.1/@ownedType.20"/>
        <ownedIterator xmi:id="i0i.ocl.Set.select..T" name="i" isRequired="false" type="T.ocl..SetT"/>
      </ownedOperation>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.Set.sortedBy..T" name="sortedBy" type="//@nestedPackage.1/@ownedType.128" implementationClass="org.eclipse.ocl.examples.library.iterator.SortedByIteration">
        <ownedComment body="Results in the ordered set containing all elements of the source collection.&#xA;The element for which body has the lowest value comes first, and so on.&#xA;The type of the body expression must have the &lt; operation defined.&#xA;The &lt; operation must return a Boolean value and must be transitive (i.e., if a &lt; b and b &lt; c, then a &lt; c).&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.Set.sortedBy..T" name="lambda" type="//@nestedPackage.1/@ownedType.21"/>
        <ownedIterator xmi:id="i0i.ocl.Set.sortedBy..T" name="i" isRequired="false" type="T.ocl..SetT"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Set.%61%..ocl.OclSelf" name="=" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyEqualOperation" precedence="Z.EQUALITY">
        <ownedComment body="Evaluates to oclText[true] if oclText[self] and s contain the same elements.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Set.%61%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Set.%60%%62%..ocl.OclSelf" name="&lt;>" type="Boolean" implementationClass="org.eclipse.ocl.examples.library.oclany.OclAnyNotEqualOperation" precedence="Z.EQUALITY">
        <ownedParameter xmi:id="p0o.ocl.Set.%60%%62%..ocl.OclSelf" name="object2" type="OclSelf"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Set.%45%..$$.UniqueCollection" name="-" type="Set" implementationClass="org.eclipse.ocl.examples.library.collection.SetMinusOperation" precedence="Z.ADDITIVE">
        <ownedComment body="The elements of oclText[self], which are not in s.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Set.%45%..$$.UniqueCollection" name="s" type="//@nestedPackage.1/@ownedType.154"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Set.excluding..ocl.OclAny" name="excluding" type="Set" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionExcludingOperation">
        <ownedComment body="The set containing all elements of oclText[self] without object.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Set.excluding..ocl.OclAny" name="object" isRequired="false" type="T.ocl.OclAny"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Set.excludingAll..$$.Collection" name="excludingAll" type="Set" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionExcludingAllOperation">
        <ownedComment body="The set containing all elements of oclText[self] apart from all occurrences of all objects.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Set.excludingAll..$$.Collection" name="objects" type="//@nestedPackage.1/@ownedType.60"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Set.flatten" name="flatten" type="//@nestedPackage.1/@ownedType.146" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionFlattenOperation">
        <ownedComment body="Redefines the Collection operation. If the element type is not a collection type, this results in the same set as oclText[self].&#xA;If the element type is a collection type, the result is the set containing all the elements of all the recursively flattened elements of oclText[self].&#xA;"/>
        <ownedTemplateSignature xmi:id="s.o.ocl.Set.flatten">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Set..flattenT2" parameteredElement="T.ocl.Set..flattenT2">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Set..flattenT2" name="T2" templateParameter="t.ocl.Set..flattenT2"/>
          </ownedParameter>
        </ownedTemplateSignature>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Set.including..T" name="including" type="Set" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionIncludingOperation">
        <ownedComment body="The set containing all elements of oclText[self] plus object.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Set.including..T" name="object" isRequired="false" type="T.ocl..SetT"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Set.includingAll..$$.Collection" name="includingAll" type="Set" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionIncludingAllOperation">
        <ownedComment body="The set containing all elements of oclText[self] and objects.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.Set.includingAll..$$.Collection" name="objects" type="//@nestedPackage.1/@ownedType.81"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Set.selectByKind..$$.Metaclass" name="selectByKind" type="//@nestedPackage.1/@ownedType.147" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionSelectByKindOperation">
        <ownedTemplateSignature xmi:id="s.o.ocl.Set.selectByKind..$$.Metaclass">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Set..selectByKindTT" parameteredElement="T.ocl.Set..selectByKindTT">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Set..selectByKindTT" name="TT" templateParameter="t.ocl.Set..selectByKindTT"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0o.ocl.Set.selectByKind..$$.Metaclass" name="type" type="//@nestedPackage.1/@ownedType.101"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.Set.selectByType..$$.Metaclass" name="selectByType" type="//@nestedPackage.1/@ownedType.148" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionSelectByTypeOperation">
        <ownedTemplateSignature xmi:id="s.o.ocl.Set.selectByType..$$.Metaclass">
          <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl.Set..selectByTypeTT" parameteredElement="T.ocl.Set..selectByTypeTT">
            <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl.Set..selectByTypeTT" name="TT" templateParameter="t.ocl.Set..selectByTypeTT"/>
          </ownedParameter>
        </ownedTemplateSignature>
        <ownedParameter xmi:id="p0o.ocl.Set.selectByType..$$.Metaclass" name="type" type="//@nestedPackage.1/@ownedType.102"/>
      </ownedOperation>
    </ownedType>
    <ownedType xsi:type="pivot:Class" xmi:id="T.ocl.State" name="State" superClass="T.ocl.OclState">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>UML</value>
        </ownedDetail>
      </ownedAnnotation>
    </ownedType>
    <ownedType xsi:type="pivot:Class" xmi:id="T.ocl.Type" name="Type" superClass="T.ocl.OclType"/>
    <ownedType xsi:type="pivot:CollectionType" xmi:id="UniqueCollection" name="UniqueCollection" superClass="//@nestedPackage.1/@ownedType.82" elementType="T.ocl..UniqueCollectionT">
      <ownedAnnotation xsi:type="pivot:Annotation" name="http://www.omg.org/ocl">
        <ownedDetail name="ClassGroup">
          <value>Collection</value>
        </ownedDetail>
      </ownedAnnotation>
      <ownedComment body="The UniqueCollection type provides the shared functionality of the OrderedSet and Set&#xA;collections for which the elements are unique.&#xA;The common supertype of UniqueCollection is Collection.&#xA;"/>
      <ownedTemplateSignature xmi:id="s.UniqueCollection">
        <ownedParameter xsi:type="pivot:TypeTemplateParameter" xmi:id="t.ocl..UniqueCollectionT" parameteredElement="T.ocl..UniqueCollectionT">
          <ownedParameteredElement xsi:type="pivot:Class" xmi:id="T.ocl..UniqueCollectionT" name="T" templateParameter="t.ocl..UniqueCollectionT"/>
        </ownedParameter>
      </ownedTemplateSignature>
      <ownedOperation xsi:type="pivot:Iteration" xmi:id="i.ocl.UniqueCollection.sortedBy..T" name="sortedBy" type="//@nestedPackage.1/@ownedType.129" implementationClass="org.eclipse.ocl.examples.library.iterator.SortedByIteration">
        <ownedComment body="Results in the ordered set containing all elements of the source collection.&#xA;The element for which body has the lowest value comes first, and so on.&#xA;The type of the body expression must have the &lt; operation defined.&#xA;The &lt; operation must return a Boolean value and must be transitive (i.e., if a &lt; b and b &lt; c, then a &lt; c).&#xA;"/>
        <ownedParameter xmi:id="p0i.ocl.UniqueCollection.sortedBy..T" name="lambda" type="//@nestedPackage.1/@ownedType.25"/>
        <ownedIterator xmi:id="i0i.ocl.UniqueCollection.sortedBy..T" name="i" isRequired="false" type="T.ocl..UniqueCollectionT"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.UniqueCollection.%45%..$$.UniqueCollection" name="-" type="UniqueCollection" implementationClass="org.eclipse.ocl.examples.library.collection.SetMinusOperation" precedence="Z.ADDITIVE">
        <ownedComment body="The elements of oclText[self], which are not in s.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.UniqueCollection.%45%..$$.UniqueCollection" name="s" type="//@nestedPackage.1/@ownedType.154"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.UniqueCollection.intersection..$$.Collection" name="intersection" type="//@nestedPackage.1/@ownedType.149" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionIntersectionOperation">
        <ownedComment body="The intersection of oclText[self] and c (i.e., the set of all elements that are in both oclText[self] and c).&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.UniqueCollection.intersection..$$.Collection" name="c" type="//@nestedPackage.1/@ownedType.82"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.UniqueCollection.symmetricDifference..$$.UniqueCollection" name="symmetricDifference" type="//@nestedPackage.1/@ownedType.149" implementationClass="org.eclipse.ocl.examples.library.collection.SetSymmetricDifferenceOperation">
        <ownedComment body="The set containing all the elements that are in oclText[self] or s, but not in both.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.UniqueCollection.symmetricDifference..$$.UniqueCollection" name="s" type="//@nestedPackage.1/@ownedType.154"/>
      </ownedOperation>
      <ownedOperation xmi:id="o.ocl.UniqueCollection.union..ocl.UniqueCollection" name="union" type="//@nestedPackage.1/@ownedType.149" implementationClass="org.eclipse.ocl.examples.library.collection.CollectionUnionOperation">
        <ownedComment body="The set consisting of all elements in oclText[self] and all elements in s.&#xA;"/>
        <ownedParameter xmi:id="p0o.ocl.UniqueCollection.union..ocl.UniqueCollection" name="s" type="UniqueCollection"/>
      </ownedOperation>
    </ownedType>
    <ownedPrecedence xmi:id="Z.NAVIGATION" name="NAVIGATION"/>
    <ownedPrecedence xmi:id="Z.UNARY" name="UNARY" order="1"/>
    <ownedPrecedence xmi:id="Z.MULTIPLICATIVE" name="MULTIPLICATIVE" order="2"/>
    <ownedPrecedence xmi:id="Z.ADDITIVE" name="ADDITIVE" order="3"/>
    <ownedPrecedence xmi:id="Z.RELATIONAL" name="RELATIONAL" order="4"/>
    <ownedPrecedence xmi:id="Z.EQUALITY" name="EQUALITY" order="5"/>
    <ownedPrecedence xmi:id="Z.AND" name="AND" order="6"/>
    <ownedPrecedence xmi:id="Z.OR" name="OR" order="7"/>
    <ownedPrecedence xmi:id="Z.XOR" name="XOR" order="8"/>
    <ownedPrecedence xmi:id="Z.IMPLIES" name="IMPLIES" order="9"/>
  </nestedPackage>
  <nestedPackage xmi:id="P.$$" name="$$" nsPrefix="orphanage" nsURI="http://www.eclipse.org/ocl/3.1.0/orphanage">
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..BagT" resultType="Boolean"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..BagT" resultType="T.ocl.Bag..collectNestedV"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..BagT" resultType="T.ocl.Bag..collectV"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..BagT" resultType="T.ocl.OclAny"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..BagT" resultType="//@nestedPackage.1/@ownedType.142"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..CollectionT" resultType="Boolean"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..CollectionT" resultType="T.ocl.Collection..collectNestedV"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..CollectionT" resultType="T.ocl.Collection..collectV"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..CollectionT" resultType="T.ocl.Collection..iterateTacc"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..CollectionT" resultType="T.ocl.OclAny"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..OrderedSetT" resultType="Boolean"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..OrderedSetT" resultType="T.ocl.OclAny"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..OrderedSetT" resultType="OrderedSet"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..OrderedSetT" resultType="T.ocl.OrderedSet..collectNestedV"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..OrderedSetT" resultType="T.ocl.OrderedSet..collectV"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..SequenceT" resultType="Boolean"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..SequenceT" resultType="T.ocl.OclAny"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..SequenceT" resultType="//@nestedPackage.1/@ownedType.127"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..SequenceT" resultType="T.ocl.Sequence..collectNestedV"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..SequenceT" resultType="T.ocl.Sequence..collectV"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..SetT" resultType="Boolean"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..SetT" resultType="T.ocl.OclAny"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..SetT" resultType="Set"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..SetT" resultType="T.ocl.Set..collectNestedV"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..SetT" resultType="T.ocl.Set..collectV"/>
    <ownedType xsi:type="pivot:LambdaType" name="Lambda" superClass="T.ocl.OclLambda" contextType="T.ocl..UniqueCollectionT" resultType="T.ocl.OclAny"/>
    <ownedType xsi:type="pivot:TupleType" name="Tuple" superClass="T.ocl.OclTuple">
      <ownedAttribute name="first" type="T.ocl..CollectionT"/>
      <ownedAttribute name="second" type="T.ocl.Collection..productT2"/>
    </ownedType>
    <ownedType xsi:type="pivot:BagType" name="Bag" superClass="//@nestedPackage.1/@ownedType.41" elementType="T.ocl.Bag..collectNestedV">
      <templateBinding signature="s.Bag">
        <parameterSubstitution actual="T.ocl.Bag..collectNestedV" formal="t.ocl..BagT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:BagType" name="Bag" superClass="//@nestedPackage.1/@ownedType.42" elementType="T.ocl.Bag..collectV">
      <templateBinding signature="s.Bag">
        <parameterSubstitution actual="T.ocl.Bag..collectV" formal="t.ocl..BagT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:BagType" name="Bag" superClass="//@nestedPackage.1/@ownedType.43" elementType="T.ocl.Bag..flattenT2">
      <templateBinding signature="s.Bag">
        <parameterSubstitution actual="T.ocl.Bag..flattenT2" formal="t.ocl..BagT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:BagType" name="Bag" superClass="//@nestedPackage.1/@ownedType.44" elementType="T.ocl.Bag..selectByKindTT">
      <templateBinding signature="s.Bag">
        <parameterSubstitution actual="T.ocl.Bag..selectByKindTT" formal="t.ocl..BagT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:BagType" name="Bag" superClass="//@nestedPackage.1/@ownedType.45" elementType="T.ocl.Bag..selectByTypeTT">
      <templateBinding signature="s.Bag">
        <parameterSubstitution actual="T.ocl.Bag..selectByTypeTT" formal="t.ocl..BagT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:BagType" name="Bag" superClass="//@nestedPackage.1/@ownedType.55" elementType="T.ocl..CollectionT">
      <templateBinding signature="s.Bag">
        <parameterSubstitution actual="T.ocl..CollectionT" formal="t.ocl..BagT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:BagType" name="Bag" superClass="//@nestedPackage.1/@ownedType.56" elementType="Collection">
      <templateBinding signature="s.Bag">
        <parameterSubstitution actual="Collection" formal="t.ocl..BagT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:BagType" name="Bag" superClass="//@nestedPackage.1/@ownedType.58" elementType="T.ocl.Enumeration">
      <templateBinding signature="s.Bag">
        <parameterSubstitution actual="T.ocl.Enumeration" formal="t.ocl..BagT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:BagType" name="Bag" superClass="//@nestedPackage.1/@ownedType.59" elementType="Metaclass">
      <templateBinding signature="s.Bag">
        <parameterSubstitution actual="Metaclass" formal="t.ocl..BagT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:BagType" name="Bag" superClass="//@nestedPackage.1/@ownedType.76" elementType="T.ocl.Set..collectNestedV">
      <templateBinding signature="s.Bag">
        <parameterSubstitution actual="T.ocl.Set..collectNestedV" formal="t.ocl..BagT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:BagType" name="Bag" superClass="//@nestedPackage.1/@ownedType.77" elementType="T.ocl.Set..collectV">
      <templateBinding signature="s.Bag">
        <parameterSubstitution actual="T.ocl.Set..collectV" formal="t.ocl..BagT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="Integer">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="Integer" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="String">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="String" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="//@nestedPackage.1/@ownedType.26">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="//@nestedPackage.1/@ownedType.26" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Bag..collectNestedV">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Bag..collectNestedV" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Bag..collectV">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Bag..collectV" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Bag..flattenT2">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Bag..flattenT2" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Bag..selectByKindTT">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Bag..selectByKindTT" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Bag..selectByTypeTT">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Bag..selectByTypeTT" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl..BagT">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl..BagT" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Collection..collectNestedV">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Collection..collectNestedV" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Collection..collectV">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Collection..collectV" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Collection..excludesAllT2">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Collection..excludesAllT2" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Collection..flattenT2">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Collection..flattenT2" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Collection..includesAllT2">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Collection..includesAllT2" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Collection..productT2">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Collection..productT2" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Collection..selectByKindTT">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Collection..selectByKindTT" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Collection..selectByTypeTT">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Collection..selectByTypeTT" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl..CollectionT">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl..CollectionT" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="Collection">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="Collection" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.EnumerationLiteral">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.EnumerationLiteral" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Enumeration">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Enumeration" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="Metaclass">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="Metaclass" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.OclAny">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.OclAny" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.OclElement">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.OclElement" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="OclSelf">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="OclSelf" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl..OrderedCollectionT">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl..OrderedCollectionT" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.OrderedSet..collectNestedV">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.OrderedSet..collectNestedV" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.OrderedSet..collectV">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.OrderedSet..collectV" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.OrderedSet..flattenT2">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.OrderedSet..flattenT2" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.OrderedSet..selectByKindTT">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.OrderedSet..selectByKindTT" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.OrderedSet..selectByTypeTT">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.OrderedSet..selectByTypeTT" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl..OrderedSetT">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl..OrderedSetT" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Sequence..collectNestedV">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Sequence..collectNestedV" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Sequence..collectV">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Sequence..collectV" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Sequence..flattenT2">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Sequence..flattenT2" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Sequence..selectByKindTT">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Sequence..selectByKindTT" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Sequence..selectByTypeTT">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Sequence..selectByTypeTT" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl..SequenceT">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl..SequenceT" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Set..collectNestedV">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Set..collectNestedV" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Set..collectV">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Set..collectV" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Set..flattenT2">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Set..flattenT2" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Set..selectByKindTT">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Set..selectByKindTT" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl.Set..selectByTypeTT">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl.Set..selectByTypeTT" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl..SetT">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl..SetT" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="Collection" superClass="T.ocl.OclAny" elementType="T.ocl..UniqueCollectionT">
      <templateBinding signature="s.Collection">
        <parameterSubstitution actual="T.ocl..UniqueCollectionT" formal="t.ocl..CollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="T.ocl.UnlimitedNatural..oclAsTypeTT">
      <templateBinding signature="s.Metaclass">
        <parameterSubstitution actual="T.ocl.UnlimitedNatural..oclAsTypeTT" formal="t.ocl..MetaclassT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="T.ocl.Bag..selectByKindTT">
      <templateBinding signature="s.Metaclass">
        <parameterSubstitution actual="T.ocl.Bag..selectByKindTT" formal="t.ocl..MetaclassT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="T.ocl.Bag..selectByTypeTT">
      <templateBinding signature="s.Metaclass">
        <parameterSubstitution actual="T.ocl.Bag..selectByTypeTT" formal="t.ocl..MetaclassT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="T.ocl.Collection..selectByKindTT">
      <templateBinding signature="s.Metaclass">
        <parameterSubstitution actual="T.ocl.Collection..selectByKindTT" formal="t.ocl..MetaclassT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="T.ocl.Collection..selectByTypeTT">
      <templateBinding signature="s.Metaclass">
        <parameterSubstitution actual="T.ocl.Collection..selectByTypeTT" formal="t.ocl..MetaclassT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="T.ocl.OclAny..oclAsTypeTT">
      <templateBinding signature="s.Metaclass">
        <parameterSubstitution actual="T.ocl.OclAny..oclAsTypeTT" formal="t.ocl..MetaclassT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="T.ocl.OclAny..oclIsKindOfT">
      <templateBinding signature="s.Metaclass">
        <parameterSubstitution actual="T.ocl.OclAny..oclIsKindOfT" formal="t.ocl..MetaclassT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="T.ocl.OclAny..oclIsTypeOfT">
      <templateBinding signature="s.Metaclass">
        <parameterSubstitution actual="T.ocl.OclAny..oclIsTypeOfT" formal="t.ocl..MetaclassT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="T.ocl.OclInvalid..oclAsTypeTT">
      <templateBinding signature="s.Metaclass">
        <parameterSubstitution actual="T.ocl.OclInvalid..oclAsTypeTT" formal="t.ocl..MetaclassT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="T.ocl.OclInvalid..oclIsKindOfT">
      <templateBinding signature="s.Metaclass">
        <parameterSubstitution actual="T.ocl.OclInvalid..oclIsKindOfT" formal="t.ocl..MetaclassT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="T.ocl.OclInvalid..oclIsTypeOfT">
      <templateBinding signature="s.Metaclass">
        <parameterSubstitution actual="T.ocl.OclInvalid..oclIsTypeOfT" formal="t.ocl..MetaclassT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="T.ocl.OclInvalid">
      <templateBinding signature="s.Metaclass">
        <parameterSubstitution actual="T.ocl.OclInvalid" formal="t.ocl..MetaclassT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="OclSelf">
      <templateBinding signature="s.Metaclass">
        <parameterSubstitution actual="OclSelf" formal="t.ocl..MetaclassT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="T.ocl.OclVoid">
      <templateBinding signature="s.Metaclass">
        <parameterSubstitution actual="T.ocl.OclVoid" formal="t.ocl..MetaclassT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="T.ocl.OrderedSet..selectByKindTT">
      <templateBinding signature="s.Metaclass">
        <parameterSubstitution actual="T.ocl.OrderedSet..selectByKindTT" formal="t.ocl..MetaclassT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="T.ocl.OrderedSet..selectByTypeTT">
      <templateBinding signature="s.Metaclass">
        <parameterSubstitution actual="T.ocl.OrderedSet..selectByTypeTT" formal="t.ocl..MetaclassT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="T.ocl.Sequence..selectByKindTT">
      <templateBinding signature="s.Metaclass">
        <parameterSubstitution actual="T.ocl.Sequence..selectByKindTT" formal="t.ocl..MetaclassT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="T.ocl.Sequence..selectByTypeTT">
      <templateBinding signature="s.Metaclass">
        <parameterSubstitution actual="T.ocl.Sequence..selectByTypeTT" formal="t.ocl..MetaclassT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="T.ocl.Set..selectByKindTT">
      <templateBinding signature="s.Metaclass">
        <parameterSubstitution actual="T.ocl.Set..selectByKindTT" formal="t.ocl..MetaclassT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:Metaclass" name="Metaclass" superClass="T.ocl.Class T.ocl.OclType" instanceType="T.ocl.Set..selectByTypeTT">
      <templateBinding signature="s.Metaclass">
        <parameterSubstitution actual="T.ocl.Set..selectByTypeTT" formal="t.ocl..MetaclassT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="OrderedCollection" superClass="//@nestedPackage.1/@ownedType.38" elementType="Integer">
      <templateBinding signature="s.OrderedCollection">
        <parameterSubstitution actual="Integer" formal="t.ocl..OrderedCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="OrderedCollection" superClass="//@nestedPackage.1/@ownedType.39" elementType="String">
      <templateBinding signature="s.OrderedCollection">
        <parameterSubstitution actual="String" formal="t.ocl..OrderedCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="OrderedCollection" superClass="//@nestedPackage.1/@ownedType.46" elementType="T.ocl..BagT">
      <templateBinding signature="s.OrderedCollection">
        <parameterSubstitution actual="T.ocl..BagT" formal="t.ocl..OrderedCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="OrderedCollection" superClass="//@nestedPackage.1/@ownedType.55" elementType="T.ocl..CollectionT">
      <templateBinding signature="s.OrderedCollection">
        <parameterSubstitution actual="T.ocl..CollectionT" formal="t.ocl..OrderedCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="OrderedCollection" superClass="//@nestedPackage.1/@ownedType.57" elementType="T.ocl.EnumerationLiteral">
      <templateBinding signature="s.OrderedCollection">
        <parameterSubstitution actual="T.ocl.EnumerationLiteral" formal="t.ocl..OrderedCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="OrderedCollection" superClass="//@nestedPackage.1/@ownedType.64" elementType="T.ocl.OrderedSet..collectNestedV">
      <templateBinding signature="s.OrderedCollection">
        <parameterSubstitution actual="T.ocl.OrderedSet..collectNestedV" formal="t.ocl..OrderedCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="OrderedCollection" superClass="//@nestedPackage.1/@ownedType.65" elementType="T.ocl.OrderedSet..collectV">
      <templateBinding signature="s.OrderedCollection">
        <parameterSubstitution actual="T.ocl.OrderedSet..collectV" formal="t.ocl..OrderedCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="OrderedCollection" superClass="//@nestedPackage.1/@ownedType.66" elementType="T.ocl.OrderedSet..flattenT2">
      <templateBinding signature="s.OrderedCollection">
        <parameterSubstitution actual="T.ocl.OrderedSet..flattenT2" formal="t.ocl..OrderedCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="OrderedCollection" superClass="//@nestedPackage.1/@ownedType.67" elementType="T.ocl.OrderedSet..selectByKindTT">
      <templateBinding signature="s.OrderedCollection">
        <parameterSubstitution actual="T.ocl.OrderedSet..selectByKindTT" formal="t.ocl..OrderedCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="OrderedCollection" superClass="//@nestedPackage.1/@ownedType.68" elementType="T.ocl.OrderedSet..selectByTypeTT">
      <templateBinding signature="s.OrderedCollection">
        <parameterSubstitution actual="T.ocl.OrderedSet..selectByTypeTT" formal="t.ocl..OrderedCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="OrderedCollection" superClass="//@nestedPackage.1/@ownedType.69" elementType="T.ocl..OrderedSetT">
      <templateBinding signature="s.OrderedCollection">
        <parameterSubstitution actual="T.ocl..OrderedSetT" formal="t.ocl..OrderedCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="OrderedCollection" superClass="//@nestedPackage.1/@ownedType.70" elementType="T.ocl.Sequence..collectNestedV">
      <templateBinding signature="s.OrderedCollection">
        <parameterSubstitution actual="T.ocl.Sequence..collectNestedV" formal="t.ocl..OrderedCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="OrderedCollection" superClass="//@nestedPackage.1/@ownedType.71" elementType="T.ocl.Sequence..collectV">
      <templateBinding signature="s.OrderedCollection">
        <parameterSubstitution actual="T.ocl.Sequence..collectV" formal="t.ocl..OrderedCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="OrderedCollection" superClass="//@nestedPackage.1/@ownedType.72" elementType="T.ocl.Sequence..flattenT2">
      <templateBinding signature="s.OrderedCollection">
        <parameterSubstitution actual="T.ocl.Sequence..flattenT2" formal="t.ocl..OrderedCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="OrderedCollection" superClass="//@nestedPackage.1/@ownedType.73" elementType="T.ocl.Sequence..selectByKindTT">
      <templateBinding signature="s.OrderedCollection">
        <parameterSubstitution actual="T.ocl.Sequence..selectByKindTT" formal="t.ocl..OrderedCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="OrderedCollection" superClass="//@nestedPackage.1/@ownedType.74" elementType="T.ocl.Sequence..selectByTypeTT">
      <templateBinding signature="s.OrderedCollection">
        <parameterSubstitution actual="T.ocl.Sequence..selectByTypeTT" formal="t.ocl..OrderedCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="OrderedCollection" superClass="//@nestedPackage.1/@ownedType.75" elementType="T.ocl..SequenceT">
      <templateBinding signature="s.OrderedCollection">
        <parameterSubstitution actual="T.ocl..SequenceT" formal="t.ocl..OrderedCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="OrderedCollection" superClass="//@nestedPackage.1/@ownedType.81" elementType="T.ocl..SetT">
      <templateBinding signature="s.OrderedCollection">
        <parameterSubstitution actual="T.ocl..SetT" formal="t.ocl..OrderedCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="OrderedCollection" superClass="//@nestedPackage.1/@ownedType.82" elementType="T.ocl..UniqueCollectionT">
      <templateBinding signature="s.OrderedCollection">
        <parameterSubstitution actual="T.ocl..UniqueCollectionT" formal="t.ocl..OrderedCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:OrderedSetType" name="OrderedSet" superClass="//@nestedPackage.1/@ownedType.106 //@nestedPackage.1/@ownedType.152" elementType="T.ocl..CollectionT">
      <templateBinding signature="s.OrderedSet">
        <parameterSubstitution actual="T.ocl..CollectionT" formal="t.ocl..OrderedSetT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:OrderedSetType" name="OrderedSet" superClass="//@nestedPackage.1/@ownedType.107 //@nestedPackage.1/@ownedType.153" elementType="T.ocl.EnumerationLiteral">
      <templateBinding signature="s.OrderedSet">
        <parameterSubstitution actual="T.ocl.EnumerationLiteral" formal="t.ocl..OrderedSetT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:OrderedSetType" name="OrderedSet" superClass="//@nestedPackage.1/@ownedType.110 //@nestedPackage.1/@ownedType.157" elementType="T.ocl.OrderedSet..flattenT2">
      <templateBinding signature="s.OrderedSet">
        <parameterSubstitution actual="T.ocl.OrderedSet..flattenT2" formal="t.ocl..OrderedSetT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:OrderedSetType" name="OrderedSet" superClass="//@nestedPackage.1/@ownedType.111 //@nestedPackage.1/@ownedType.158" elementType="T.ocl.OrderedSet..selectByKindTT">
      <templateBinding signature="s.OrderedSet">
        <parameterSubstitution actual="T.ocl.OrderedSet..selectByKindTT" formal="t.ocl..OrderedSetT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:OrderedSetType" name="OrderedSet" superClass="//@nestedPackage.1/@ownedType.112 //@nestedPackage.1/@ownedType.159" elementType="T.ocl.OrderedSet..selectByTypeTT">
      <templateBinding signature="s.OrderedSet">
        <parameterSubstitution actual="T.ocl.OrderedSet..selectByTypeTT" formal="t.ocl..OrderedSetT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:OrderedSetType" name="OrderedSet" superClass="//@nestedPackage.1/@ownedType.119 //@nestedPackage.1/@ownedType.161" elementType="T.ocl..SequenceT">
      <templateBinding signature="s.OrderedSet">
        <parameterSubstitution actual="T.ocl..SequenceT" formal="t.ocl..OrderedSetT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:OrderedSetType" name="OrderedSet" superClass="//@nestedPackage.1/@ownedType.120 //@nestedPackage.1/@ownedType.165" elementType="T.ocl..SetT">
      <templateBinding signature="s.OrderedSet">
        <parameterSubstitution actual="T.ocl..SetT" formal="t.ocl..OrderedSetT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:OrderedSetType" name="OrderedSet" superClass="//@nestedPackage.1/@ownedType.121 //@nestedPackage.1/@ownedType.166" elementType="T.ocl..UniqueCollectionT">
      <templateBinding signature="s.OrderedSet">
        <parameterSubstitution actual="T.ocl..UniqueCollectionT" formal="t.ocl..OrderedSetT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:SequenceType" name="Sequence" superClass="//@nestedPackage.1/@ownedType.103" elementType="Integer">
      <templateBinding signature="s.Sequence">
        <parameterSubstitution actual="Integer" formal="t.ocl..SequenceT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:SequenceType" name="Sequence" superClass="//@nestedPackage.1/@ownedType.104" elementType="String">
      <templateBinding signature="s.Sequence">
        <parameterSubstitution actual="String" formal="t.ocl..SequenceT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:SequenceType" name="Sequence" superClass="//@nestedPackage.1/@ownedType.105" elementType="T.ocl..BagT">
      <templateBinding signature="s.Sequence">
        <parameterSubstitution actual="T.ocl..BagT" formal="t.ocl..SequenceT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:SequenceType" name="Sequence" superClass="//@nestedPackage.1/@ownedType.106" elementType="T.ocl..CollectionT">
      <templateBinding signature="s.Sequence">
        <parameterSubstitution actual="T.ocl..CollectionT" formal="t.ocl..SequenceT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:SequenceType" name="Sequence" superClass="//@nestedPackage.1/@ownedType.108" elementType="T.ocl.OrderedSet..collectNestedV">
      <templateBinding signature="s.Sequence">
        <parameterSubstitution actual="T.ocl.OrderedSet..collectNestedV" formal="t.ocl..SequenceT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:SequenceType" name="Sequence" superClass="//@nestedPackage.1/@ownedType.109" elementType="T.ocl.OrderedSet..collectV">
      <templateBinding signature="s.Sequence">
        <parameterSubstitution actual="T.ocl.OrderedSet..collectV" formal="t.ocl..SequenceT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:SequenceType" name="Sequence" superClass="//@nestedPackage.1/@ownedType.114" elementType="T.ocl.Sequence..collectNestedV">
      <templateBinding signature="s.Sequence">
        <parameterSubstitution actual="T.ocl.Sequence..collectNestedV" formal="t.ocl..SequenceT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:SequenceType" name="Sequence" superClass="//@nestedPackage.1/@ownedType.115" elementType="T.ocl.Sequence..collectV">
      <templateBinding signature="s.Sequence">
        <parameterSubstitution actual="T.ocl.Sequence..collectV" formal="t.ocl..SequenceT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:SequenceType" name="Sequence" superClass="//@nestedPackage.1/@ownedType.116" elementType="T.ocl.Sequence..flattenT2">
      <templateBinding signature="s.Sequence">
        <parameterSubstitution actual="T.ocl.Sequence..flattenT2" formal="t.ocl..SequenceT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:SequenceType" name="Sequence" superClass="//@nestedPackage.1/@ownedType.117" elementType="T.ocl.Sequence..selectByKindTT">
      <templateBinding signature="s.Sequence">
        <parameterSubstitution actual="T.ocl.Sequence..selectByKindTT" formal="t.ocl..SequenceT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:SequenceType" name="Sequence" superClass="//@nestedPackage.1/@ownedType.118" elementType="T.ocl.Sequence..selectByTypeTT">
      <templateBinding signature="s.Sequence">
        <parameterSubstitution actual="T.ocl.Sequence..selectByTypeTT" formal="t.ocl..SequenceT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:SetType" name="Set" superClass="//@nestedPackage.1/@ownedType.150" elementType="//@nestedPackage.1/@ownedType.26">
      <templateBinding signature="s.Set">
        <parameterSubstitution actual="//@nestedPackage.1/@ownedType.26" formal="t.ocl..SetT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:SetType" name="Set" superClass="//@nestedPackage.1/@ownedType.151" elementType="T.ocl..BagT">
      <templateBinding signature="s.Set">
        <parameterSubstitution actual="T.ocl..BagT" formal="t.ocl..SetT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:SetType" name="Set" superClass="//@nestedPackage.1/@ownedType.152" elementType="T.ocl..CollectionT">
      <templateBinding signature="s.Set">
        <parameterSubstitution actual="T.ocl..CollectionT" formal="t.ocl..SetT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:SetType" name="Set" superClass="//@nestedPackage.1/@ownedType.155" elementType="T.ocl.OclElement">
      <templateBinding signature="s.Set">
        <parameterSubstitution actual="T.ocl.OclElement" formal="t.ocl..SetT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:SetType" name="Set" superClass="//@nestedPackage.1/@ownedType.156" elementType="OclSelf">
      <templateBinding signature="s.Set">
        <parameterSubstitution actual="OclSelf" formal="t.ocl..SetT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:SetType" name="Set" superClass="//@nestedPackage.1/@ownedType.162" elementType="T.ocl.Set..flattenT2">
      <templateBinding signature="s.Set">
        <parameterSubstitution actual="T.ocl.Set..flattenT2" formal="t.ocl..SetT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:SetType" name="Set" superClass="//@nestedPackage.1/@ownedType.163" elementType="T.ocl.Set..selectByKindTT">
      <templateBinding signature="s.Set">
        <parameterSubstitution actual="T.ocl.Set..selectByKindTT" formal="t.ocl..SetT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:SetType" name="Set" superClass="//@nestedPackage.1/@ownedType.164" elementType="T.ocl.Set..selectByTypeTT">
      <templateBinding signature="s.Set">
        <parameterSubstitution actual="T.ocl.Set..selectByTypeTT" formal="t.ocl..SetT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:SetType" name="Set" superClass="//@nestedPackage.1/@ownedType.166" elementType="T.ocl..UniqueCollectionT">
      <templateBinding signature="s.Set">
        <parameterSubstitution actual="T.ocl..UniqueCollectionT" formal="t.ocl..SetT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="UniqueCollection" superClass="//@nestedPackage.1/@ownedType.40" elementType="//@nestedPackage.1/@ownedType.26">
      <templateBinding signature="s.UniqueCollection">
        <parameterSubstitution actual="//@nestedPackage.1/@ownedType.26" formal="t.ocl..UniqueCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="UniqueCollection" superClass="//@nestedPackage.1/@ownedType.46" elementType="T.ocl..BagT">
      <templateBinding signature="s.UniqueCollection">
        <parameterSubstitution actual="T.ocl..BagT" formal="t.ocl..UniqueCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="UniqueCollection" superClass="//@nestedPackage.1/@ownedType.55" elementType="T.ocl..CollectionT">
      <templateBinding signature="s.UniqueCollection">
        <parameterSubstitution actual="T.ocl..CollectionT" formal="t.ocl..UniqueCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="UniqueCollection" superClass="//@nestedPackage.1/@ownedType.57" elementType="T.ocl.EnumerationLiteral">
      <templateBinding signature="s.UniqueCollection">
        <parameterSubstitution actual="T.ocl.EnumerationLiteral" formal="t.ocl..UniqueCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="UniqueCollection" superClass="//@nestedPackage.1/@ownedType.60" elementType="T.ocl.OclAny">
      <templateBinding signature="s.UniqueCollection">
        <parameterSubstitution actual="T.ocl.OclAny" formal="t.ocl..UniqueCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="UniqueCollection" superClass="//@nestedPackage.1/@ownedType.61" elementType="T.ocl.OclElement">
      <templateBinding signature="s.UniqueCollection">
        <parameterSubstitution actual="T.ocl.OclElement" formal="t.ocl..UniqueCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="UniqueCollection" superClass="//@nestedPackage.1/@ownedType.62" elementType="OclSelf">
      <templateBinding signature="s.UniqueCollection">
        <parameterSubstitution actual="OclSelf" formal="t.ocl..UniqueCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="UniqueCollection" superClass="//@nestedPackage.1/@ownedType.66" elementType="T.ocl.OrderedSet..flattenT2">
      <templateBinding signature="s.UniqueCollection">
        <parameterSubstitution actual="T.ocl.OrderedSet..flattenT2" formal="t.ocl..UniqueCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="UniqueCollection" superClass="//@nestedPackage.1/@ownedType.67" elementType="T.ocl.OrderedSet..selectByKindTT">
      <templateBinding signature="s.UniqueCollection">
        <parameterSubstitution actual="T.ocl.OrderedSet..selectByKindTT" formal="t.ocl..UniqueCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="UniqueCollection" superClass="//@nestedPackage.1/@ownedType.68" elementType="T.ocl.OrderedSet..selectByTypeTT">
      <templateBinding signature="s.UniqueCollection">
        <parameterSubstitution actual="T.ocl.OrderedSet..selectByTypeTT" formal="t.ocl..UniqueCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="UniqueCollection" superClass="//@nestedPackage.1/@ownedType.69" elementType="T.ocl..OrderedSetT">
      <templateBinding signature="s.UniqueCollection">
        <parameterSubstitution actual="T.ocl..OrderedSetT" formal="t.ocl..UniqueCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="UniqueCollection" superClass="//@nestedPackage.1/@ownedType.75" elementType="T.ocl..SequenceT">
      <templateBinding signature="s.UniqueCollection">
        <parameterSubstitution actual="T.ocl..SequenceT" formal="t.ocl..UniqueCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="UniqueCollection" superClass="//@nestedPackage.1/@ownedType.78" elementType="T.ocl.Set..flattenT2">
      <templateBinding signature="s.UniqueCollection">
        <parameterSubstitution actual="T.ocl.Set..flattenT2" formal="t.ocl..UniqueCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="UniqueCollection" superClass="//@nestedPackage.1/@ownedType.79" elementType="T.ocl.Set..selectByKindTT">
      <templateBinding signature="s.UniqueCollection">
        <parameterSubstitution actual="T.ocl.Set..selectByKindTT" formal="t.ocl..UniqueCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="UniqueCollection" superClass="//@nestedPackage.1/@ownedType.80" elementType="T.ocl.Set..selectByTypeTT">
      <templateBinding signature="s.UniqueCollection">
        <parameterSubstitution actual="T.ocl.Set..selectByTypeTT" formal="t.ocl..UniqueCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="UniqueCollection" superClass="//@nestedPackage.1/@ownedType.81" elementType="T.ocl..SetT">
      <templateBinding signature="s.UniqueCollection">
        <parameterSubstitution actual="T.ocl..SetT" formal="t.ocl..UniqueCollectionT"/>
      </templateBinding>
    </ownedType>
    <ownedType xsi:type="pivot:CollectionType" name="UniqueCollection" superClass="//@nestedPackage.1/@ownedType.82" elementType="T.ocl..UniqueCollectionT">
      <templateBinding signature="s.UniqueCollection">
        <parameterSubstitution actual="T.ocl..UniqueCollectionT" formal="t.ocl..UniqueCollectionT"/>
      </templateBinding>
    </ownedType>
  </nestedPackage>
</pivot:Root>
